{
	"name": "copy_metadata_monthly",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "WaterSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5d229775-4d95-42c0-b67d-519742b72a42"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e6a89ab3-ce27-4148-bad8-97a6fee2010c/resourceGroups/FergusAssam/providers/Microsoft.Synapse/workspaces/water-crisis/bigDataPools/WaterSparkPool",
				"name": "WaterSparkPool",
				"type": "Spark",
				"endpoint": "https://water-crisis.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/WaterSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# PySpark ETL"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Parameters and Libraries"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create a parameter that will be used to change read folder and mode dynamically in the pipeline"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Get the version of the folder from the Bronze layer and this will be used as a parameter in the pipeline (Toggled as a parameter)\r\n",
					"FolderName = \"Version_365\"\r\n",
					"Mode = \"overwrite\" \r\n",
					"file_path = 'abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/Version_370/Metadata'\r\n",
					"#For the first time it overwrites and for subsequent notebooks, it apppends which is adjusted via the pipeline\r\n",
					"# Also live data can be extracted from the API."
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Generate the dataset Folder incrementally"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"FolderName_SeperatorRemoved = FolderName.replace(\"_\",\"\")\r\n",
					"VersionName = FolderName.split('_')[0]\r\n",
					"VersionNum = FolderName.split('_')[1]"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Import Libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql import functions as F\r\n",
					"from pyspark.sql.functions import lit,col,regexp_replace,to_date,count,sum,coalesce,to_timestamp #add constant or literal value as a new column to the DataFrame. #regexp_replace to replace a character in a string\r\n",
					"from pyspark.sql.types import DateType\r\n",
					"import re,json,requests,os\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"from scipy.stats import zscore\r\n",
					"import pandas as pd, numpy as np\r\n",
					"\r\n",
					"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
					"#If you check the schema table, you will notice the column Timestamp is stored as (M.D.Y.hh.mm). \r\n",
					"#inorder to handle unforseen exception error. eg October, Oct ,oct, 10, we use the timeParserPolicy=LEGACY to fix this."
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create Connections"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Spark Session & blob connection\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create Spark Session and connection to blob storage. It is created in the Notebook and not in the pipeline. \r\n",
					"#You can only set Spark configuration properties that start with the spark.sql prefix.\r\n",
					"\"\"\"You can have many spark sessions but only 1 spark context (like spark driver). It is better in the notebook because\r\n",
					"It already has access to the underlying Spark features for creating RDD and dataframe.\"\"\"\r\n",
					"\r\n",
					"blob_account = \"waterstorageaccount\"\r\n",
					"blob_container = \"BronzeLayer\"\r\n",
					"\r\n",
					"sc = SparkSession.builder.getOrCreate()\r\n",
					"#getConnectionString()\r\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"dls_sas_token = token_library.getConnectionString(\"water-crisis-WorkspaceDefaultStorage\")\r\n",
					"spark.conf.set(\r\n",
					"    'fs.azure.sas.{}.{}.blob.core.windows.net' .format(blob_container, blob_account),\r\n",
					"    dls_sas_token)\r\n",
					"\r\n",
					"#https://projectwatercrisis.dfs.core.windows.net/waterstorageaccount/BronzeLayer/Version_322/gauge_sensors_reads.csv\r\n",
					""
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Dynamic Delimiter"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Use Regex to read the header, determine the delimiter from a set of predefined common delimiters \r\n",
					"# and store it as a variable then use that variable as a delimiter\r\n",
					"def f_get_delimiter (source_path):\r\n",
					"    try:\r\n",
					"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
					"        header_str = ''.join(headerlist)\r\n",
					"\r\n",
					"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
					"        return results.group()\r\n",
					"    except Exception as err:\r\n",
					"        print(\"Error Occured \", str(err))\r\n",
					"\r\n",
					""
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sensors MetaData"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### We have data available from 4 different types of sensors:\r\n",
					"- Reservoir Sensors <br>\r\n",
					"- Gauging Sensors <br>\r\n",
					"- Pluviomter Sensors <br>\r\n",
					"- Piezometer Sensors"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ACA API endpoints\r\n",
					"# https://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/dades-obertes-temps-real/index.html#googtrans(ca|en)\r\n",
					"\r\n",
					"# Info Catalog URLs [Metadata]\r\n",
					"URL_RESERVOIRS_CATALOG = \"http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=embassament\"\r\n",
					"URL_GAUGE_CATALOG = \"http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=aforament\"\r\n",
					"URL_PLUVIOMETER_CATALOG = \"http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=pluviometre\"\r\n",
					"URL_PIEZOMETER_CATALOG = \"http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=piezometre\"\r\n",
					"\r\n",
					"# Last data collected URLs [readings]\r\n",
					"URL_RESERVOIRS_DATA = \"http://aca-web.gencat.cat/sdim2/apirest/data/EMBASSAMENT-EST\"\r\n",
					"URL_GAUGE_DATA = \"http://aca-web.gencat.cat/sdim2/apirest/data/AFORAMENT-EST\"\r\n",
					"URL_PLUVIOMETER_DATA = \"http://aca-web.gencat.cat/sdim2/apirest/data/PLUVIOMETREACA-EST\"\r\n",
					"URL_PIEZOMETER_DATA = \"http://aca-web.gencat.cat/sdim2/apirest/data/PIEZOMETRE-EST\""
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_data(url):\r\n",
					"    # Make a GET request to the URL\r\n",
					"    response = requests.get(url)\r\n",
					"\r\n",
					"    # Check if the request was successful (status code 200)\r\n",
					"    if response.status_code == 200:\r\n",
					"        # Parse the JSON response\r\n",
					"        json_data = response.json()\r\n",
					"        return json_data\r\n",
					"    \r\n",
					"    else:\r\n",
					"        print(f\"Request failed with status code {response.status_code}\")  \r\n",
					"        return None\r\n",
					"    \r\n",
					"\r\n",
					"# Creating a folder to store sensors metadata files\r\n",
					"if not os.path.exists(\"sensors_metadata/\"):\r\n",
					"    os.mkdir(\"sensors_metadata/\")"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 2.1. Reservoir Sensors Metadata¶\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"json_reservoir_sensors_metadata = get_data(URL_RESERVOIRS_CATALOG)\r\n",
					"print(len(json_reservoir_sensors_metadata[\"providers\"]))\r\n",
					"print(json_reservoir_sensors_metadata[\"providers\"][0].keys())\r\n",
					"\r\n",
					"\r\n",
					"# Exploring 3rd-4th levels (sensors)\r\n",
					"print(\"Provider:\", json_reservoir_sensors_metadata[\"providers\"][0][\"provider\"])\r\n",
					"print(\"Permission:\", json_reservoir_sensors_metadata[\"providers\"][0][\"permission\"])\r\n",
					"print(\"Num  sensors:\", len(json_reservoir_sensors_metadata[\"providers\"][0][\"sensors\"]))\r\n",
					"print(\"\\n\\tSensor keys:\", json_reservoir_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys())"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(json_reservoir_sensors_metadata[\"providers\"][0][\"sensors\"][3][\"componentAdditionalInfo\"])\r\n",
					"#3 = row"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exploring a sample sensor\"s info\r\n",
					"\r\n",
					"for k in json_reservoir_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys():\r\n",
					"    print(f\"\\n{k}  -->  {json_reservoir_sensors_metadata['providers'][0]['sensors'][0][k]}\")"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Building the dataframe to store all sensors data\r\n",
					"\r\n",
					"translate = {\r\n",
					"    \"Nivell absolut\": \"Absolute level\",\r\n",
					"    \"Volum embassat\": \"Reservoir volume\",\r\n",
					"    \"Percentatge volum embassat\": \"Percentage reservoir volume\",\r\n",
					"    \"En servei\": \"In service\",\r\n",
					"    \"En manteniment\": \"In maintenance\",\r\n",
					"    \"Fora de servei\": \"Out of service\",\r\n",
					"    \"Funcionalitat limitada\": \"Limited functionality\",\r\n",
					"}\r\n",
					"\r\n",
					"sensors_metadata = []\r\n",
					"\r\n",
					"for i, s in enumerate(json_reservoir_sensors_metadata[\"providers\"][0][\"sensors\"]):\r\n",
					"    sensor_metadata = {\r\n",
					"        \"sensor_id\": s[\"sensor\"],\r\n",
					"        \"description\": translate[s[\"description\"]] if s[\"description\"] in translate else s[\"description\"],\r\n",
					"        \"dataType\": s[\"dataType\"],\r\n",
					"        \"location\": s[\"location\"],\r\n",
					"        \"type\": s[\"type\"],\r\n",
					"        \"unit\": \"masl\" if s[\"unit\"] == \"msnm\" else s[\"unit\"],\r\n",
					"        \"timeZone\": s[\"timeZone\"],\r\n",
					"        \"publicAccess\": s[\"publicAccess\"],\r\n",
					"        \"component\": s[\"component\"],\r\n",
					"        \"componentType\": \"reservoir\" if s[\"componentType\"] == \"embassament\" else s[\"componentType\"],\r\n",
					"        \"componentDesc\": s[\"componentDesc\"],\r\n",
					"        \"componentPublicAccess\": s[\"componentPublicAccess\"],\r\n",
					"        \"info_sample_rate_(min)\": s[\"additionalInfo\"][\"Temps mostreig (min)\"] if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_min_val\": int(s[\"additionalInfo\"][\"Rang mínim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_max_val\": int(s[\"additionalInfo\"][\"Rang màxim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_region\": s[\"componentAdditionalInfo\"][\"Comarca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_province\": s[\"componentAdditionalInfo\"][\"Província\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_river\": s[\"componentAdditionalInfo\"][\"Riu\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_river_district\": s[\"componentAdditionalInfo\"][\"Districte fluvial\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_basin\": s[\"componentAdditionalInfo\"][\"Conca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_sub_basin\": s[\"componentAdditionalInfo\"][\"Subconca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_municipality\": s[\"componentAdditionalInfo\"][\"Terme municipal\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_reservoir_max_capacity_(hm3)\": float(s[\"componentAdditionalInfo\"][\"Capacitat màxima embassament\"].split(\" \")[0].replace(\",\", \".\")) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_x_coord_utm_etrs89\": int(s[\"componentAdditionalInfo\"][\"Coordenada X (UTM ETRS89)\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_y_coord_utm_etrs89\": int(s[\"componentAdditionalInfo\"][\"Coordenada Y (UTM ETRS89)\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_drained_basin_surface(km2)\": float(s[\"componentAdditionalInfo\"][\"Superfície conca drenada\"].split(\" \")[0].replace(\",\", \".\")) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_responsible_entity\": s[\"componentAdditionalInfo\"][\"Titular\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_state\": (translate[s[\"componentAdditionalInfo\"][\"Estat\"]] if s[\"componentAdditionalInfo\"][\"Estat\"] in translate else s[\"componentAdditionalInfo\"][\"Estat\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"    }\r\n",
					"    sensors_metadata.append(sensor_metadata)\r\n",
					""
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Reservoir DF"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"reservoir_sensors_metadata = pd.DataFrame(sensors_metadata)\r\n",
					"reservoir_sensors_metadata.to_csv(\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/Version_370/Metadata/reservoir_sensors_metadata.csv\", index=False)\r\n",
					"\r\n",
					"print(reservoir_sensors_metadata.shape)\r\n",
					"display(reservoir_sensors_metadata.info())\r\n",
					"reservoir_sensors_metadata.head()"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#print sample\r\n",
					"reservoir_sensors_metadata.iloc[1]\r\n",
					""
				],
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 2.2. Gauge Sensors Metadata¶\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Getting Gauge Sensors Metadata from the API\r\n",
					"json_gauge_sensors_metadata = get_data(URL_GAUGE_CATALOG)\r\n",
					"\r\n",
					"# Exploring 1st-2nd levels of the json hierarchy\r\n",
					"print(len(json_gauge_sensors_metadata[\"providers\"]))\r\n",
					"print(json_gauge_sensors_metadata[\"providers\"][0].keys())\r\n",
					"\r\n",
					"# Exploring 3rd-4th levels (sensors)\r\n",
					"print(\"Provider:\", json_gauge_sensors_metadata[\"providers\"][0][\"provider\"])\r\n",
					"print(\"Permission:\", json_gauge_sensors_metadata[\"providers\"][0][\"permission\"])\r\n",
					"print(\"Num  sensors:\", len(json_gauge_sensors_metadata[\"providers\"][0][\"sensors\"]))\r\n",
					"print(\"\\n\\tSensor keys:\", list(json_gauge_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys()))"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exploring a sample sensor\"s info\r\n",
					"\r\n",
					"for k in json_gauge_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys():\r\n",
					"    print(f\"\\n{k}  -->  {json_gauge_sensors_metadata['providers'][0]['sensors'][0][k]}\")"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exploring a sample sensor\"s info\r\n",
					"\r\n",
					"print(json_gauge_sensors_metadata[\"providers\"][0][\"sensors\"][15][\"componentAdditionalInfo\"])"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Building the dataframe to store all sensors data\r\n",
					"\r\n",
					"additional_fields_map = {\r\n",
					"    \"Codi ordre\": \"info_order_id\",\r\n",
					"    \"Comarca\": \"info_region\",\r\n",
					"    \"Conca\": \"info_basin\",\r\n",
					"    \"Coordenada X (UTM ETRS89)\": \"info_x_coord_utm_etrs89\",\r\n",
					"    \"Coordenada Y (UTM ETRS89)\": \"info_y_coord_utm_etrs89\",\r\n",
					"    \"Districte fluvial\": \"info_river_district\",\r\n",
					"    \"Estat\": \"info_state\",\r\n",
					"    \"Província\": \"info_province\",\r\n",
					"    \"Riu\": \"info_river\",\r\n",
					"    \"Subconca\": \"info_sub_basin\",\r\n",
					"    \"Superfície conca drenada\": \"info_drained_basin_surface(km2)\",\r\n",
					"    \"Terme municipal\": \"info_municipality\",\r\n",
					"    \"Tipologia\": \"info_tipology\",\r\n",
					"    \"Titular\": \"info_responsible_entity\",\r\n",
					"}\r\n",
					"\r\n",
					"translate = {\r\n",
					"    \"Cabal riu\": \"River discharge\",\r\n",
					"    \"Nivell riu\": \"River level\",\r\n",
					"    \"Cabal canal\": \"Canal discharge\",\r\n",
					"    \"Cabal total\": \"Total discharge\",\r\n",
					"    \"En servei\": \"In service\",\r\n",
					"    \"En manteniment\": \"In maintenance\",\r\n",
					"    \"Fora de servei\": \"Out of service\",\r\n",
					"    \"Funcionalitat limitada\": \"Limited functionality\",\r\n",
					"}\r\n",
					"\r\n",
					"sensors_metadata = []\r\n",
					"\r\n",
					"for i, s in enumerate(json_gauge_sensors_metadata[\"providers\"][0][\"sensors\"]):\r\n",
					"    sensor_metadata = {\r\n",
					"        \"sensor_id\": s[\"sensor\"],\r\n",
					"        \"description\": translate[s[\"description\"]] if s[\"description\"] in translate else s[\"description\"],\r\n",
					"        \"dataType\": s[\"dataType\"],\r\n",
					"        \"location\": s[\"location\"],\r\n",
					"        \"type\": s[\"type\"],\r\n",
					"        \"unit\": s[\"unit\"],\r\n",
					"        \"timeZone\": s[\"timeZone\"],\r\n",
					"        \"publicAccess\": s[\"publicAccess\"],\r\n",
					"        \"component\": s[\"component\"],\r\n",
					"        \"componentType\": \"Capacity\" if s[\"componentType\"] == \"aforament\" else s[\"componentType\"],\r\n",
					"        \"componentDesc\": s[\"componentDesc\"],\r\n",
					"        \"componentPublicAccess\": s[\"componentPublicAccess\"],\r\n",
					"        \"info_sample_rate_(min)\": s[\"additionalInfo\"][\"Temps mostreig (min)\"] if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_min_val\": int(s[\"additionalInfo\"][\"Rang mínim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_max_val\": int(s[\"additionalInfo\"][\"Rang màxim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"    }\r\n",
					"    \r\n",
					"    if \"componentAdditionalInfo\" in s:\r\n",
					"        for field_k, field_v in additional_fields_map.items():\r\n",
					"            if field_k in s[\"componentAdditionalInfo\"]:\r\n",
					"                \r\n",
					"                if field_v in [\"info_x_coord_utm_etrs89\", \"info_y_coord_utm_etrs89\"]:\r\n",
					"                    sensor_metadata[field_v] = int(s[\"componentAdditionalInfo\"][field_k])\r\n",
					"                    \r\n",
					"                elif field_v == \"info_drained_basin_surface(km2)\":\r\n",
					"                    sensor_metadata[field_v] = float(s[\"componentAdditionalInfo\"][field_k].split(\" \")[0].replace(\",\", \".\")) if s[\"componentAdditionalInfo\"][field_k] else np.nan\r\n",
					"                    \r\n",
					"                elif field_v == \"info_state\":\r\n",
					"                    sensor_metadata[field_v] = (translate[s[\"componentAdditionalInfo\"][\"Estat\"]] if s[\"componentAdditionalInfo\"][\"Estat\"] in translate else s[\"componentAdditionalInfo\"][\"Estat\"]) if \"componentAdditionalInfo\" in s else np.nan\r\n",
					"                \r\n",
					"                else:\r\n",
					"                    sensor_metadata[field_v] = s[\"componentAdditionalInfo\"][field_k]\r\n",
					"                    \r\n",
					"            else: \r\n",
					"                sensor_metadata[field_v] = np.nan\r\n",
					"                \r\n",
					"    sensors_metadata.append(sensor_metadata)\r\n",
					""
				],
				"execution_count": 42
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Gauge DF"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gauge_sensors_metadata = pd.DataFrame(sensors_metadata)\r\n",
					"gauge_sensors_metadata.to_csv(\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/Version_370/Metadata/gauge_sensors_metadata.csv\", index=False)\r\n",
					"\r\n",
					"gauge_sensors_metadata.head()"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Comparing different sample types\r\n",
					"# There are two types of river sensors: gauge (l/s) and level (cm)\r\n",
					"\r\n",
					"print(gauge_sensors_metadata.iloc[0]), \r\n",
					"print(\"-\" * 60), \r\n",
					"print(gauge_sensors_metadata.iloc[1])\r\n",
					"print(\"-\" * 60), \r\n",
					"print(gauge_sensors_metadata.iloc[15])"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gauge_sensors_metadata[\"componentType\"].value_counts()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 2.3. Pluviometer Sensors Metadata¶\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Getting Gauge Sensors Metadata from the API\r\n",
					"json_pluviometer_sensors_metadata = get_data(URL_PLUVIOMETER_CATALOG)\r\n",
					"\r\n",
					"# Exploring 1st-2nd levels of the json hierarchy\r\n",
					"print(len(json_pluviometer_sensors_metadata[\"providers\"]))\r\n",
					"print(json_pluviometer_sensors_metadata[\"providers\"][0].keys())\r\n",
					"\r\n",
					"# Exploring 3rd-4th levels (sensors)\r\n",
					"print(\"Provider:\", json_pluviometer_sensors_metadata[\"providers\"][0][\"provider\"])\r\n",
					"print(\"Permission:\", json_pluviometer_sensors_metadata[\"providers\"][0][\"permission\"])\r\n",
					"print(\"Num  sensors:\", len(json_pluviometer_sensors_metadata[\"providers\"][0][\"sensors\"]))\r\n",
					"print(\"\\n\\tSensor keys:\", list(json_pluviometer_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys()))"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exploring a sample sensor\"s info\r\n",
					"\r\n",
					"for k in json_pluviometer_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys():\r\n",
					"    print(f\"\\n{k}  -->  {json_pluviometer_sensors_metadata['providers'][0]['sensors'][0][k]}\")"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exploring a sample sensor\"s info\r\n",
					"\r\n",
					"print(*[k + \"\\n\" for k in json_pluviometer_sensors_metadata[\"providers\"][0][\"sensors\"][1][\"componentAdditionalInfo\"]])"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"info_fields = []\r\n",
					"\r\n",
					"for s in json_pluviometer_sensors_metadata[\"providers\"][0][\"sensors\"]:\r\n",
					"#     print(s[\"description\"])\r\n",
					"#     continue\r\n",
					"    info_fields.extend(s[\"componentAdditionalInfo\"])\r\n",
					"    print(len(s[\"componentAdditionalInfo\"]), end=\", \")\r\n",
					"\r\n",
					"print(\"\\n\\nunique:\", len(set(info_fields)))\r\n",
					"set(info_fields)"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Building the dataframe to store all sensors data\r\n",
					"\r\n",
					"translate = {\r\n",
					"    \"Nivell piezomètric absolut\": \"Absolute piezometric level\",\r\n",
					"    \"Temperatura de l'aigua\": \"Water temperature\",\r\n",
					"    \"Conductivita\": \"Conductivity\",\r\n",
					"    \"En servei\": \"In service\",\r\n",
					"    \"En manteniment\": \"In maintenance\",\r\n",
					"    \"Fora de servei\": \"Out of service\",\r\n",
					"    \"Funcionalitat limitada\": \"Limited functionality\",\r\n",
					"}\r\n",
					"\r\n",
					"sensors_metadata = []\r\n",
					"\r\n",
					"for i, s in enumerate(json_pluviometer_sensors_metadata[\"providers\"][0][\"sensors\"]):\r\n",
					"    sensor_metadata = {\r\n",
					"        \"sensor_id\": s[\"sensor\"],\r\n",
					"        \"description\": \"Rainfall intensity\" if s[\"description\"] == \"Intensitat de precipitació\" else s[\"description\"],\r\n",
					"        \"dataType\": s[\"dataType\"],\r\n",
					"        \"location\": s[\"location\"],\r\n",
					"        \"type\": s[\"type\"],\r\n",
					"        \"unit\": s[\"unit\"],\r\n",
					"        \"timeZone\": s[\"timeZone\"],\r\n",
					"        \"publicAccess\": s[\"publicAccess\"],\r\n",
					"        \"component\": s[\"component\"],\r\n",
					"        \"componentType\": \"reservoir\" if s[\"componentType\"] == \"embassament\" else s[\"componentType\"],\r\n",
					"        \"componentDesc\": s[\"componentDesc\"],\r\n",
					"        \"componentPublicAccess\": s[\"componentPublicAccess\"],\r\n",
					"        \"info_sample_rate_(min)\": s[\"additionalInfo\"][\"Temps mostreig (min)\"] if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_min_val\": int(s[\"additionalInfo\"][\"Rang mínim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_max_val\": int(s[\"additionalInfo\"][\"Rang màxim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_region\": s[\"componentAdditionalInfo\"][\"Comarca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_province\": s[\"componentAdditionalInfo\"][\"Província\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_river\": s[\"componentAdditionalInfo\"][\"Riu\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_river_district\": s[\"componentAdditionalInfo\"][\"Districte fluvial\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_basin\": s[\"componentAdditionalInfo\"][\"Conca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_sub_basin\": s[\"componentAdditionalInfo\"][\"Subconca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_municipality\": s[\"componentAdditionalInfo\"][\"Terme municipal\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_x_coord_utm_etrs89\": int(s[\"componentAdditionalInfo\"][\"Coordenada X (UTM ETRS89)\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_y_coord_utm_etrs89\": int(s[\"componentAdditionalInfo\"][\"Coordenada Y (UTM ETRS89)\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_state\": (translate[s[\"componentAdditionalInfo\"][\"Estat\"]] if s[\"componentAdditionalInfo\"][\"Estat\"] in translate else s[\"componentAdditionalInfo\"][\"Estat\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"    }\r\n",
					"    \r\n",
					"    sensors_metadata.append(sensor_metadata)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Pluviometer DF"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pluviometer_sensors_metadata = pd.DataFrame(sensors_metadata)\r\n",
					"pluviometer_sensors_metadata.to_csv(\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/Version_370/Metadata/pluviometer_sensors_metadata.csv\", index=False)\r\n",
					"\r\n",
					"pluviometer_sensors_metadata.head()"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pluviometer_sensors_metadata.iloc[0]\r\n",
					""
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 2.4. Piezometer Sensors Metadata¶\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Getting Piezometer Sensors Metadata from the API\r\n",
					"json_piezometer_sensors_metadata = get_data(URL_PIEZOMETER_CATALOG)\r\n",
					"\r\n",
					"# Exploring 1st-2nd levels of the json hierarchy\r\n",
					"print(len(json_piezometer_sensors_metadata[\"providers\"]))\r\n",
					"print(json_piezometer_sensors_metadata[\"providers\"][0].keys())\r\n",
					"\r\n",
					"\r\n",
					"# Exploring 3rd-4th levels (sensors)\r\n",
					"print(\"Provider:\", json_piezometer_sensors_metadata[\"providers\"][0][\"provider\"])\r\n",
					"print(\"Permission:\", json_piezometer_sensors_metadata[\"providers\"][0][\"permission\"])\r\n",
					"print(\"Num  sensors:\", len(json_piezometer_sensors_metadata[\"providers\"][0][\"sensors\"]))\r\n",
					"print(\"\\n\\tSensor keys:\", list(json_piezometer_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys()))"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exploring a sample sensor\"s info\r\n",
					"\r\n",
					"for k in json_piezometer_sensors_metadata[\"providers\"][0][\"sensors\"][0].keys():\r\n",
					"    print(f\"\\n{k}  -->  {json_piezometer_sensors_metadata['providers'][0]['sensors'][0][k]}\")"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Exploring a sample sensor\"s info\r\n",
					"\r\n",
					"print(*[k + \"\\n\" for k in json_piezometer_sensors_metadata[\"providers\"][0][\"sensors\"][1][\"componentAdditionalInfo\"]])"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"info_fields = []\r\n",
					"\r\n",
					"for i, s in enumerate(json_piezometer_sensors_metadata[\"providers\"][0][\"sensors\"]):\r\n",
					"#     print(s[\"description\"])\r\n",
					"#     continue\r\n",
					"    info_fields.extend(s[\"componentAdditionalInfo\"]) if \"componentAdditionalInfo\" in s else print(\"no componentAdditionalInfo in\", i)\r\n",
					"    print(len(s[\"componentAdditionalInfo\"]) if \"componentAdditionalInfo\" in s else \"\", end=\", \")\r\n",
					"\r\n",
					"print(\"\\n\\nunique:\", len(set(info_fields)))\r\n",
					"set(info_fields)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Building the dataframe to store all sensors data\r\n",
					"\r\n",
					"translate = {\r\n",
					"    \"Nivell piezomètric absolut\": \"Absolute piezometric level\",\r\n",
					"    \"Temperatura de l'aigua\": \"Water temperature\",\r\n",
					"    \"Conductivitat\": \"Conductivity\",\r\n",
					"    \"En servei\": \"In service\",\r\n",
					"    \"En manteniment\": \"In maintenance\",\r\n",
					"    \"Fora de servei\": \"Out of service\",\r\n",
					"    \"Funcionalitat limitada\": \"Limited functionality\",\r\n",
					"    \"msnm\": \"masl\",\r\n",
					"    r\"\\xbaC\": \"°C\",\r\n",
					"    r\"\\xb5S/cm\": \"µS/cm\",  # microsiemens/cm\r\n",
					"}\r\n",
					"\r\n",
					"sensors_metadata = []\r\n",
					"\r\n",
					"for i, s in enumerate(json_piezometer_sensors_metadata[\"providers\"][0][\"sensors\"]):\r\n",
					"    sensor_metadata = {\r\n",
					"        \"sensor_id\": s[\"sensor\"],\r\n",
					"        \"description\": translate[s[\"description\"]] if s[\"description\"] in translate else s[\"description\"],\r\n",
					"        \"dataType\": s[\"dataType\"],\r\n",
					"        \"location\": s[\"location\"],\r\n",
					"        \"type\": s[\"type\"],\r\n",
					"        \"unit\": translate[s[\"unit\"]] if s[\"unit\"] in translate else s[\"unit\"],\r\n",
					"        \"timeZone\": s[\"timeZone\"],\r\n",
					"        \"publicAccess\": s[\"publicAccess\"],\r\n",
					"        \"component\": s[\"component\"],\r\n",
					"        \"componentType\": \"reservoir\" if s[\"componentType\"] == \"embassament\" else s[\"componentType\"],\r\n",
					"        \"componentDesc\": s[\"componentDesc\"],\r\n",
					"        \"componentPublicAccess\": s[\"componentPublicAccess\"],\r\n",
					"        \"info_sample_rate_(min)\": s[\"additionalInfo\"][\"Temps mostreig (min)\"] if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_min_val\": int(s[\"additionalInfo\"][\"Rang mínim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_max_val\": int(s[\"additionalInfo\"][\"Rang màxim\"].replace(\",\", \".\")) if \"additionalInfo\" in s else np.nan,\r\n",
					"        \"info_region\": s[\"componentAdditionalInfo\"][\"Comarca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_province\": s[\"componentAdditionalInfo\"][\"Província\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_aquifer\": s[\"componentAdditionalInfo\"][\"Aqüífer\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_water_mass\": s[\"componentAdditionalInfo\"][\"Massa d'aigua\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_river_district\": s[\"componentAdditionalInfo\"][\"Districte fluvial\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_basin\": s[\"componentAdditionalInfo\"][\"Conca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_sub_basin\": s[\"componentAdditionalInfo\"][\"Subconca\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_municipality\": s[\"componentAdditionalInfo\"][\"Terme municipal\"] if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_x_coord_utm_etrs89\": int(s[\"componentAdditionalInfo\"][\"Coordenada X (UTM ETRS89)\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_y_coord_utm_etrs89\": int(s[\"componentAdditionalInfo\"][\"Coordenada Y (UTM ETRS89)\"]) if \"componentAdditionalInfo\" in s else np.nan,\r\n",
					"        \"info_state\": (translate[s[\"componentAdditionalInfo\"][\"Estat\"]] if s[\"componentAdditionalInfo\"][\"Estat\"] in translate else s[\"componentAdditionalInfo\"][\"Estat\"]) if \"componentAdditionalInfo\" in s else np.nan,    \r\n",
					"    }\r\n",
					"    \r\n",
					"    sensors_metadata.append(sensor_metadata)\r\n",
					""
				],
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Piezometer DF"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"piezometer_sensors_metadata = pd.DataFrame(sensors_metadata)\r\n",
					"piezometer_sensors_metadata.to_csv(\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/Version_370/Metadata/piezometer_sensors_metadata.csv\", index=False)\r\n",
					"piezometer_sensors_metadata.head()\r\n",
					""
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"piezometer_sensors_metadata.iloc[4]\r\n",
					""
				],
				"execution_count": 60
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### 2.5. Sensor States¶\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list_sensors_metadata = [\r\n",
					"    reservoir_sensors_metadata,\r\n",
					"    gauge_sensors_metadata,\r\n",
					"    pluviometer_sensors_metadata,\r\n",
					"    piezometer_sensors_metadata,\r\n",
					"]\r\n",
					"\r\n",
					"for df_sensor in list_sensors_metadata:\r\n",
					"    print(\"-\"*40)\r\n",
					"    print(df_sensor.componentType[0])\r\n",
					"    print(\"-\"*40)\r\n",
					"    print(df_sensor.info_state.value_counts(), \"\\n\")"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Assuming dfs_ dictionary is already populated as before\r\n",
					"types = ['Gauge','Reservoir','Pluviometer', 'Piezometer']\r\n",
					"for subtype in types:\r\n",
					"    # Dynamically create variable names and assign the corresponding DataFrame from dfs_\r\n",
					"    print (f'{subtype} metadata database created.')\r\n",
					"\r\n",
					"print(\"All databases successfully created\")"
				],
				"execution_count": 62
			}
		]
	}
}