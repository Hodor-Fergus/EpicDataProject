{
	"name": "copy_readings",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "WaterSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "dbd4f09d-959b-4933-ab84-b9a2428cfb2c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"af8e20b8-4ded-42fc-8dda-1b49fa361ea4": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "97.8902",
										"1": "768.81",
										"2": "596.09",
										"3": "380.316",
										"4": "132.59",
										"5": "188.2808",
										"6": "514.7",
										"7": "78.1042",
										"8": "453.29",
										"9": "194.74",
										"10": "2.284",
										"11": "7.193",
										"12": "61.0538",
										"13": "11.773",
										"14": "0.7914",
										"15": "1.3188",
										"16": "0.149",
										"17": "2.801",
										"18": "0.341",
										"19": "2.791",
										"20": "1.069",
										"21": "83.516",
										"22": "12.3202",
										"23": "7.455",
										"24": "25.177",
										"25": "19.957",
										"26": "33.343",
										"27": "15.892",
										"28": "27.551",
										"29": "8.129",
										"30": "301.7156",
										"31": "21.5946",
										"32": "50.4012"
									},
									{
										"0": "97.8758",
										"1": "768.8226",
										"2": "596.12",
										"3": "380.2508",
										"4": "132.59",
										"5": "188.261",
										"6": "514.71",
										"7": "78.1086",
										"8": "453.31",
										"9": "194.74",
										"10": "2.277",
										"11": "7.193",
										"12": "60.9894",
										"13": "11.773",
										"14": "0.792",
										"15": "1.32",
										"16": "0.149",
										"17": "2.801",
										"18": "0.342",
										"19": "2.799",
										"20": "1.063",
										"21": "83.047",
										"22": "12.2198",
										"23": "7.3942",
										"24": "25.213",
										"25": "19.9696",
										"26": "33.372",
										"27": "15.902",
										"28": "27.591",
										"29": "8.136",
										"30": "301.7888",
										"31": "21.6568",
										"32": "50.5476"
									},
									{
										"0": "97.87",
										"1": "768.85",
										"2": "596.1612",
										"3": "380.1716",
										"4": "132.56",
										"5": "188.1186",
										"6": "514.72",
										"7": "78.1126",
										"8": "453.2968",
										"9": "194.75",
										"10": "2.274",
										"11": "7.168",
										"12": "60.882",
										"13": "11.732",
										"14": "0.7924",
										"15": "1.3208",
										"16": "0.149",
										"17": "2.801",
										"18": "0.3416",
										"19": "2.7958",
										"20": "1.0184",
										"21": "79.5622",
										"22": "12.0976",
										"23": "7.3206",
										"24": "25.2634",
										"25": "19.997",
										"26": "33.404",
										"27": "15.924",
										"28": "27.6456",
										"29": "8.144",
										"30": "301.8756",
										"31": "21.7312",
										"32": "50.7212"
									},
									{
										"0": "97.88",
										"1": "768.88",
										"2": "596.16",
										"3": "380.1196",
										"4": "132.56",
										"5": "188.316",
										"6": "514.72",
										"7": "78.1126",
										"8": "453.28",
										"9": "194.74",
										"10": "2.279",
										"11": "7.168",
										"12": "60.8982",
										"13": "11.732",
										"14": "0.7926",
										"15": "1.3212",
										"16": "0.149",
										"17": "2.801",
										"18": "0.34",
										"19": "2.782",
										"20": "1.08",
										"21": "84.375",
										"22": "12.018",
										"23": "7.2722",
										"24": "25.262",
										"25": "20.028",
										"26": "33.404",
										"27": "15.948",
										"28": "27.644",
										"29": "8.144",
										"30": "301.9298",
										"31": "21.778",
										"32": "50.8296"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "080581-002-ANA006",
										"type": "double"
									},
									{
										"key": "1",
										"name": "081419-003-ANA005",
										"type": "double"
									},
									{
										"key": "2",
										"name": "082687-001-ANA015",
										"type": "double"
									},
									{
										"key": "3",
										"name": "083036-001-ANA023",
										"type": "double"
									},
									{
										"key": "4",
										"name": "170600-001-ANA021",
										"type": "double"
									},
									{
										"key": "5",
										"name": "171899-003-ANA007",
										"type": "double"
									},
									{
										"key": "6",
										"name": "250753-004-ANA010",
										"type": "double"
									},
									{
										"key": "7",
										"name": "430430-001-ANA002",
										"type": "double"
									},
									{
										"key": "8",
										"name": "430496-001-ANA001",
										"type": "double"
									},
									{
										"key": "9",
										"name": "430537-001-ANA006",
										"type": "double"
									},
									{
										"key": "10",
										"name": "CALC000004",
										"type": "double"
									},
									{
										"key": "11",
										"name": "CALC000005",
										"type": "double"
									},
									{
										"key": "12",
										"name": "CALC000041",
										"type": "double"
									},
									{
										"key": "13",
										"name": "CALC000046",
										"type": "double"
									},
									{
										"key": "14",
										"name": "CALC000092",
										"type": "double"
									},
									{
										"key": "15",
										"name": "CALC000103",
										"type": "double"
									},
									{
										"key": "16",
										"name": "CALC000108",
										"type": "double"
									},
									{
										"key": "17",
										"name": "CALC000120",
										"type": "double"
									},
									{
										"key": "18",
										"name": "CALC000123",
										"type": "double"
									},
									{
										"key": "19",
										"name": "CALC000125",
										"type": "double"
									},
									{
										"key": "20",
										"name": "CALC000126",
										"type": "double"
									},
									{
										"key": "21",
										"name": "CALC000143",
										"type": "double"
									},
									{
										"key": "22",
										"name": "CALC000145",
										"type": "double"
									},
									{
										"key": "23",
										"name": "CALC000152",
										"type": "double"
									},
									{
										"key": "24",
										"name": "CALC000713",
										"type": "double"
									},
									{
										"key": "25",
										"name": "CALC000722",
										"type": "double"
									},
									{
										"key": "26",
										"name": "CALC000735",
										"type": "double"
									},
									{
										"key": "27",
										"name": "CALC000698",
										"type": "double"
									},
									{
										"key": "28",
										"name": "CALC000697",
										"type": "double"
									},
									{
										"key": "29",
										"name": "CALC000699",
										"type": "double"
									},
									{
										"key": "30",
										"name": "171169-001-ANA009",
										"type": "double"
									},
									{
										"key": "31",
										"name": "CALC000168",
										"type": "double"
									},
									{
										"key": "32",
										"name": "CALC000158",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"bae7c72e-bf75-4cdb-8d34-23ae524e579a": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "-0.02",
										"1": "8.548",
										"2": "-500.8452",
										"4": "34.1144",
										"5": "-1.4806",
										"6": "-7.0",
										"7": "106.2698",
										"8": "2200.816",
										"9": "114.72",
										"10": "-0.9846",
										"11": "3.2762",
										"12": "20.46",
										"13": "32.7",
										"14": "7.64",
										"15": "16.0502",
										"16": "0.0078",
										"17": "5.703",
										"18": "34.3584",
										"19": "30.56",
										"20": "6.26",
										"21": "1.81",
										"22": "100.9",
										"23": "-50.635",
										"24": "107.774",
										"25": "0.0",
										"26": "0.053",
										"27": "180.143",
										"28": "0.185",
										"29": "0.739",
										"30": "0.451",
										"31": "0.0",
										"32": "0.0",
										"33": "0.1316",
										"34": "0.0584",
										"35": "0.8408",
										"36": "-0.092",
										"37": "4.761",
										"38": "0.315",
										"39": "3.2872",
										"41": "0.2348",
										"42": "0.0",
										"43": "1.2824",
										"44": "0.0964",
										"45": "0.0078",
										"46": "0.6456",
										"47": "0.1006",
										"48": "0.2202",
										"49": "0.052",
										"50": "0.081",
										"51": "1.1814",
										"52": "1.5444",
										"53": "0.0",
										"54": "2.813",
										"55": "2.5526",
										"56": "0.0986",
										"57": "0.506",
										"58": "4.1818",
										"59": "0.2996",
										"60": "0.014",
										"62": "0.5206",
										"63": "2.4252",
										"64": "4.8562",
										"65": "0.0",
										"66": "0.1938",
										"67": "0.028",
										"68": "0.0",
										"69": "2.3858",
										"70": "0.111",
										"72": "0.8894",
										"73": "0.009",
										"74": "0.9564",
										"75": "0.1742",
										"76": "0.069",
										"77": "0.089",
										"78": "0.021",
										"79": "0.0",
										"80": "0.1414",
										"81": "0.0454",
										"82": "35.75",
										"83": "0.024",
										"84": "79.6",
										"85": "1.362",
										"86": "0.058",
										"87": "33.533",
										"88": "0.01",
										"89": "0.057",
										"90": "107.3564",
										"91": "59.0938",
										"92": "-0.625",
										"93": "19.0806",
										"94": "20.405",
										"95": "9.7128",
										"96": "5.6022",
										"97": "97.931",
										"98": "11.9944",
										"99": "107.3766",
										"100": "12.3704",
										"101": "3.4864",
										"102": "6.117",
										"103": "6.2",
										"104": "16.5396",
										"105": "2.1528",
										"106": "13.706",
										"108": "5.2856",
										"109": "5.6458",
										"110": "18.737",
										"111": "3.6126",
										"112": "8.7728",
										"113": "10.7202",
										"114": "16.176",
										"115": "10.86",
										"116": "6.7436",
										"117": "12.26",
										"118": "7.0",
										"119": "-62.9338",
										"120": "8.4838",
										"121": "-1.32",
										"122": "23.0",
										"123": "149.9146",
										"124": "8.2934",
										"125": "25.9084",
										"126": "46.1918",
										"127": "13.52",
										"128": "3.9056",
										"129": "-6.805",
										"130": "78.3246",
										"131": "0.0324",
										"132": "4.2964",
										"133": "0.0",
										"134": "0.36",
										"135": "-6.76",
										"136": "9.48",
										"137": "0.1122",
										"138": "3.8342",
										"140": "0.9054",
										"141": "2.3184",
										"142": "0.0866",
										"143": "0.0992",
										"144": "1.482",
										"145": "-0.5166",
										"146": "0.04",
										"147": "0.013",
										"148": "1.794",
										"149": "-6.2252",
										"151": "-10.1696",
										"152": "101.205",
										"153": "0.11",
										"154": "2.7532",
										"157": "5.4704",
										"158": "0.0576",
										"159": "0.1844",
										"160": "30.2032",
										"161": "4.7748",
										"162": "37.64",
										"163": "0.1254",
										"164": "35.3384",
										"165": "76.2546",
										"166": "1.4336",
										"167": "0.184",
										"168": "9.258",
										"169": "0.4358",
										"170": "0.0302"
									},
									{
										"0": "-0.16",
										"1": "1.4158",
										"2": "-500.8128",
										"4": "30.8574",
										"5": "-1.8952",
										"6": "-7.0",
										"7": "105.8772",
										"8": "2277.914",
										"9": "113.92",
										"10": "-0.963",
										"11": "3.6242",
										"12": "20.82",
										"13": "32.28",
										"14": "7.62",
										"15": "15.8704",
										"16": "0.0066",
										"17": "5.7068",
										"18": "34.1424",
										"19": "30.37",
										"20": "5.68",
										"21": "1.81",
										"22": "100.78",
										"23": "-50.3496",
										"24": "106.3662",
										"25": "0.0",
										"26": "0.0458",
										"27": "180.2488",
										"28": "0.198",
										"29": "0.7388",
										"30": "0.0",
										"31": "0.0",
										"32": "0.0",
										"33": "0.1478",
										"34": "0.0594",
										"35": "0.89",
										"36": "0.3626",
										"37": "4.8342",
										"38": "0.2744",
										"39": "3.8086",
										"41": "0.1296",
										"42": "0.0",
										"43": "1.2896",
										"44": "0.002",
										"45": "0.008",
										"46": "0.6078",
										"47": "0.1232",
										"48": "0.2156",
										"49": "0.052",
										"50": "0.064",
										"51": "1.1512",
										"52": "1.709",
										"53": "0.0",
										"54": "2.7282",
										"55": "2.4518",
										"56": "0.1158",
										"57": "0.5958",
										"58": "3.1172",
										"59": "0.2952",
										"60": "0.008",
										"62": "0.523",
										"63": "2.4332",
										"64": "4.6168",
										"65": "0.0",
										"66": "0.2076",
										"67": "0.028",
										"68": "0.0",
										"69": "2.0124",
										"70": "0.1018",
										"72": "0.9128",
										"73": "0.009",
										"74": "0.9122",
										"75": "0.1732",
										"76": "0.069",
										"77": "0.084",
										"78": "0.021",
										"79": "0.0",
										"80": "0.1288",
										"81": "0.0448",
										"82": "35.2772",
										"83": "0.0218",
										"84": "82.4",
										"85": "1.3162",
										"86": "0.0626",
										"87": "33.4974",
										"88": "0.01",
										"89": "0.056",
										"90": "106.5144",
										"91": "59.9352",
										"92": "-0.6582",
										"93": "16.2292",
										"94": "18.4644",
										"95": "9.0174",
										"96": "5.5914",
										"97": "98.1998",
										"98": "10.0132",
										"99": "108.0658",
										"100": "25.7956",
										"101": "2.5708",
										"102": "5.261",
										"103": "6.0",
										"104": "16.3632",
										"105": "2.1688",
										"106": "13.092",
										"108": "5.7852",
										"109": "6.3356",
										"110": "17.5326",
										"111": "1.89",
										"112": "8.6642",
										"113": "11.3426",
										"114": "15.5422",
										"115": "10.06",
										"116": "6.7664",
										"117": "12.7",
										"118": "6.76",
										"119": "-61.6866",
										"120": "-1.172",
										"121": "-1.28",
										"122": "22.9",
										"123": "149.9356",
										"124": "8.2442",
										"125": "26.3392",
										"126": "45.73",
										"127": "13.44",
										"128": "3.9542",
										"129": "-6.825",
										"130": "77.7186",
										"131": "0.0338",
										"132": "4.3928",
										"133": "0.0",
										"134": "0.52",
										"135": "-6.7",
										"136": "6.52",
										"137": "0.0694",
										"138": "3.3136",
										"140": "0.8166",
										"141": "2.267",
										"142": "0.0806",
										"143": "0.108",
										"144": "207.3842",
										"145": "-0.7022",
										"146": "0.04",
										"147": "0.0068",
										"148": "0.9556",
										"149": "-6.1918",
										"151": "-10.7476",
										"152": "101.0318",
										"153": "0.1144",
										"154": "2.8618",
										"157": "4.3556",
										"158": "0.0426",
										"159": "0.1766",
										"160": "29.9038",
										"161": "3.6618",
										"162": "33.06",
										"163": "0.128",
										"164": "35.4078",
										"165": "75.8718",
										"166": "1.3708",
										"167": "0.1838",
										"168": "9.249",
										"169": "0.3034",
										"170": "0.03"
									},
									{
										"0": "0.08",
										"1": "-0.016",
										"2": "-500.8246",
										"4": "32.9456",
										"5": "-1.8308",
										"6": "-7.0",
										"7": "105.905",
										"8": "2102.63",
										"9": "113.92",
										"10": "-0.5692",
										"11": "3.4642",
										"12": "20.1",
										"13": "31.0",
										"14": "7.44",
										"15": "15.9442",
										"16": "0.0076",
										"17": "8.4658",
										"18": "33.44",
										"19": "30.0086",
										"20": "5.38",
										"21": "1.686",
										"22": "100.5",
										"23": "-50.4498",
										"24": "107.005",
										"25": "0.0",
										"26": "0.03",
										"27": "180.278",
										"28": "0.1806",
										"29": "0.739",
										"30": "0.0",
										"31": "0.0",
										"32": "0.0",
										"33": "0.103",
										"34": "0.0456",
										"35": "0.8214",
										"36": "-0.9222",
										"37": "4.6212",
										"38": "0.338",
										"39": "4.6812",
										"41": "0.1898",
										"42": "0.0",
										"43": "1.2248",
										"44": "0.0164",
										"45": "0.008",
										"46": "0.5756",
										"47": "0.0888",
										"48": "0.2096",
										"49": "0.0452",
										"50": "0.052",
										"51": "1.0192",
										"52": "1.8788",
										"53": "0.0",
										"54": "2.6414",
										"55": "2.42",
										"56": "0.1012",
										"57": "0.3726",
										"58": "3.9796",
										"59": "0.299",
										"60": "0.007",
										"62": "0.5236",
										"63": "2.3146",
										"64": "4.3816",
										"65": "0.0",
										"66": "0.2262",
										"67": "0.025",
										"68": "0.0",
										"69": "3.0806",
										"70": "0.107",
										"72": "0.866",
										"73": "0.0086",
										"74": "2.7502",
										"75": "0.1608",
										"76": "0.07",
										"77": "0.08",
										"78": "0.021",
										"79": "0.0",
										"80": "0.1286",
										"81": "0.0368",
										"82": "48.0996",
										"83": "0.022",
										"84": "81.0",
										"85": "1.175",
										"86": "0.063",
										"87": "33.1788",
										"88": "0.01",
										"89": "0.0566",
										"90": "106.2486",
										"91": "57.8014",
										"92": "-0.6628",
										"93": "18.5632",
										"94": "23.7056",
										"95": "8.3832",
										"96": "5.2608",
										"97": "97.99",
										"98": "10.221",
										"99": "109.1812",
										"100": "22.716",
										"101": "4.0034",
										"102": "4.617",
										"103": "5.8",
										"104": "15.6418",
										"105": "2.081",
										"106": "13.442",
										"108": "5.3706",
										"109": "5.2416",
										"110": "14.8202",
										"111": "1.8294",
										"112": "8.7514",
										"113": "11.996",
										"114": "14.9542",
										"115": "10.3",
										"116": "6.7704",
										"117": "12.62",
										"118": "6.8",
										"119": "-62.3046",
										"120": "3.7886",
										"121": "-1.64",
										"122": "22.96",
										"123": "149.9748",
										"124": "8.964",
										"125": "25.7244",
										"126": "43.613",
										"127": "12.24",
										"128": "3.154",
										"129": "-6.8362",
										"130": "79.7672",
										"131": "0.03",
										"132": "4.372",
										"133": "0.0",
										"134": "-0.16",
										"135": "-6.7",
										"136": "6.06",
										"137": "0.0654",
										"138": "2.3234",
										"140": "0.7934",
										"141": "2.2696",
										"142": "0.0822",
										"143": "0.106",
										"144": "0.4566",
										"145": "-0.7118",
										"146": "0.04",
										"147": "0.0056",
										"148": "0.7764",
										"149": "-6.3162",
										"151": "-13.1922",
										"152": "100.8086",
										"153": "0.1294",
										"154": "3.3106",
										"157": "4.544",
										"158": "0.0452",
										"159": "0.1762",
										"160": "29.8894",
										"161": "5.7976",
										"162": "40.98",
										"163": "0.127",
										"164": "35.3762",
										"165": "75.6906",
										"166": "1.3436",
										"167": "0.182",
										"168": "9.211",
										"169": "0.3174",
										"170": "0.0272"
									},
									{
										"0": "-0.08",
										"1": "21.2122",
										"2": "-500.8984",
										"4": "48.1806",
										"5": "-1.5834",
										"6": "-7.0",
										"7": "106.1844",
										"8": "1921.026",
										"9": "113.84",
										"10": "-0.9622",
										"11": "3.466",
										"12": "20.18",
										"13": "31.3",
										"14": "7.28",
										"15": "16.074",
										"16": "0.0062",
										"17": "5.7928",
										"18": "33.0964",
										"19": "30.4002",
										"20": "4.76",
										"21": "1.81",
										"22": "100.46",
										"23": "-50.565",
										"24": "0.0",
										"25": "0.0",
										"26": "0.0276",
										"27": "180.4012",
										"28": "0.1802",
										"29": "0.739",
										"31": "0.0",
										"32": "0.0",
										"33": "0.1258",
										"34": "0.0478",
										"35": "0.8662",
										"36": "-0.2642",
										"37": "4.4422",
										"38": "0.3358",
										"39": "2.8218",
										"41": "1.6538",
										"42": "0.0",
										"43": "1.1888",
										"44": "0.002",
										"45": "0.008",
										"46": "0.5666",
										"47": "0.0836",
										"48": "0.205",
										"49": "0.0438",
										"50": "0.053",
										"51": "0.8444",
										"52": "1.9486",
										"53": "0.0",
										"54": "2.5648",
										"55": "2.2644",
										"56": "0.0924",
										"57": "0.3074",
										"58": "3.7698",
										"59": "0.295",
										"60": "0.006",
										"62": "0.5194",
										"63": "2.1914",
										"64": "5.3478",
										"65": "0.0",
										"66": "0.1956",
										"67": "0.024",
										"68": "0.0",
										"69": "2.516",
										"70": "0.0958",
										"72": "0.8712",
										"73": "0.009",
										"74": "1.0796",
										"75": "0.1506",
										"76": "0.07",
										"77": "0.0788",
										"78": "0.021",
										"79": "0.0",
										"80": "0.1272",
										"81": "0.0392",
										"82": "36.9656",
										"83": "0.022",
										"84": "79.6",
										"85": "1.206",
										"86": "0.0512",
										"87": "33.1982",
										"88": "0.01",
										"89": "0.058",
										"90": "104.8588",
										"91": "57.0986",
										"92": "-0.6456",
										"93": "18.0216",
										"94": "21.0528",
										"95": "8.2076",
										"96": "5.1856",
										"97": "98.1906",
										"98": "10.5156",
										"99": "106.67",
										"100": "17.3528",
										"101": "3.953",
										"102": "4.664",
										"103": "5.74",
										"104": "15.666",
										"105": "1.9568",
										"106": "12.566",
										"108": "5.0982",
										"109": "5.0724",
										"110": "17.8202",
										"111": "1.5636",
										"112": "8.6666",
										"113": "12.2632",
										"114": "17.4184",
										"115": "10.6",
										"116": "6.735",
										"117": "12.74",
										"118": "6.8",
										"119": "-62.3816",
										"120": "-1.0956",
										"121": "-1.84",
										"122": "23.1",
										"123": "149.9214",
										"124": "8.3556",
										"125": "26.1344",
										"126": "40.3948",
										"127": "12.64",
										"128": "3.2912",
										"129": "-6.8236",
										"130": "83.8664",
										"131": "0.032",
										"132": "4.328",
										"133": "0.0",
										"134": "0.82",
										"135": "-7.24",
										"136": "8.42",
										"137": "0.0956",
										"138": "3.4346",
										"140": "0.8472",
										"141": "2.306",
										"142": "0.085",
										"143": "0.109",
										"144": "0.4996",
										"145": "-0.5452",
										"146": "0.04",
										"147": "0.0116",
										"148": "1.5868",
										"149": "-6.282",
										"151": "-13.157",
										"152": "100.6388",
										"153": "0.1246",
										"154": "3.1596",
										"157": "4.9332",
										"158": "0.05",
										"159": "0.1756",
										"160": "29.8678",
										"161": "3.5446",
										"162": "32.52",
										"163": "0.1254",
										"164": "35.3444",
										"165": "75.881",
										"166": "1.3726",
										"167": "0.1744",
										"168": "9.0562",
										"169": "0.3178",
										"170": "0.031"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "080060-001-ANA01",
										"type": "double"
									},
									{
										"key": "1",
										"name": "080180-005-ANA001",
										"type": "double"
									},
									{
										"key": "2",
										"name": "080180-005-ANA002",
										"type": "double"
									},
									{
										"key": "3",
										"name": "081252-001-ANA02",
										"type": "double"
									},
									{
										"key": "4",
										"name": "171501-001-ANA001",
										"type": "double"
									},
									{
										"key": "5",
										"name": "171501-001-ANA002",
										"type": "double"
									},
									{
										"key": "6",
										"name": "171637-001-ANA01",
										"type": "double"
									},
									{
										"key": "7",
										"name": "171674-006-ANA004",
										"type": "double"
									},
									{
										"key": "8",
										"name": "171707-001-ANA010",
										"type": "double"
									},
									{
										"key": "9",
										"name": "171714-001-ANA01",
										"type": "double"
									},
									{
										"key": "10",
										"name": "171812-001-ANA001",
										"type": "double"
									},
									{
										"key": "11",
										"name": "171910-001-ANA001",
										"type": "double"
									},
									{
										"key": "12",
										"name": "251116-004-ANA01",
										"type": "double"
									},
									{
										"key": "13",
										"name": "251116-005-ANA01",
										"type": "double"
									},
									{
										"key": "14",
										"name": "251462-001-ANA02",
										"type": "double"
									},
									{
										"key": "15",
										"name": "430496-001-ANA003",
										"type": "double"
									},
									{
										"key": "16",
										"name": "430496-001-ANA006",
										"type": "double"
									},
									{
										"key": "17",
										"name": "430496-001-ANA007",
										"type": "double"
									},
									{
										"key": "18",
										"name": "430496-001-ANA018",
										"type": "double"
									},
									{
										"key": "19",
										"name": "430496-002-ANA009",
										"type": "double"
									},
									{
										"key": "20",
										"name": "430496-003-ANA01",
										"type": "double"
									},
									{
										"key": "21",
										"name": "431270-001-ANA01",
										"type": "double"
									},
									{
										"key": "22",
										"name": "431482-004-ANA01",
										"type": "double"
									},
									{
										"key": "23",
										"name": "431652-001-ANA001",
										"type": "double"
									},
									{
										"key": "24",
										"name": "CALC000001",
										"type": "double"
									},
									{
										"key": "25",
										"name": "CALC000007",
										"type": "double"
									},
									{
										"key": "26",
										"name": "CALC000008",
										"type": "double"
									},
									{
										"key": "27",
										"name": "CALC000085",
										"type": "double"
									},
									{
										"key": "28",
										"name": "CALC000088",
										"type": "double"
									},
									{
										"key": "29",
										"name": "CALC000719",
										"type": "double"
									},
									{
										"key": "30",
										"name": "CALC000736",
										"type": "double"
									},
									{
										"key": "31",
										"name": "CALC001096",
										"type": "double"
									},
									{
										"key": "32",
										"name": "CALC001097",
										"type": "double"
									},
									{
										"key": "33",
										"name": "CALC001100",
										"type": "double"
									},
									{
										"key": "34",
										"name": "CALC001101",
										"type": "double"
									},
									{
										"key": "35",
										"name": "CALC001103",
										"type": "double"
									},
									{
										"key": "36",
										"name": "CALC001110",
										"type": "double"
									},
									{
										"key": "37",
										"name": "CALC001130",
										"type": "double"
									},
									{
										"key": "38",
										"name": "CALC001139",
										"type": "double"
									},
									{
										"key": "39",
										"name": "CALC001144",
										"type": "double"
									},
									{
										"key": "40",
										"name": "CALC001145",
										"type": "double"
									},
									{
										"key": "41",
										"name": "CALC001175",
										"type": "double"
									},
									{
										"key": "42",
										"name": "CALC001176",
										"type": "double"
									},
									{
										"key": "43",
										"name": "CALC001201",
										"type": "double"
									},
									{
										"key": "44",
										"name": "CALC001204",
										"type": "double"
									},
									{
										"key": "45",
										"name": "CALC001206",
										"type": "double"
									},
									{
										"key": "46",
										"name": "CALC001209",
										"type": "double"
									},
									{
										"key": "47",
										"name": "CALC001210",
										"type": "double"
									},
									{
										"key": "48",
										"name": "CALC001211",
										"type": "double"
									},
									{
										"key": "49",
										"name": "CALC001212",
										"type": "double"
									},
									{
										"key": "50",
										"name": "CALC001213",
										"type": "double"
									},
									{
										"key": "51",
										"name": "CALC001218",
										"type": "double"
									},
									{
										"key": "52",
										"name": "CALC001219",
										"type": "double"
									},
									{
										"key": "53",
										"name": "CALC001222",
										"type": "double"
									},
									{
										"key": "54",
										"name": "CALC001228",
										"type": "double"
									},
									{
										"key": "55",
										"name": "CALC001230",
										"type": "double"
									},
									{
										"key": "56",
										"name": "CALC001237",
										"type": "double"
									},
									{
										"key": "57",
										"name": "CALC001241",
										"type": "double"
									},
									{
										"key": "58",
										"name": "CALC001244",
										"type": "double"
									},
									{
										"key": "59",
										"name": "CALC001249",
										"type": "double"
									},
									{
										"key": "60",
										"name": "CALC001266",
										"type": "double"
									},
									{
										"key": "61",
										"name": "CALC001270",
										"type": "double"
									},
									{
										"key": "62",
										"name": "CALC001274",
										"type": "double"
									},
									{
										"key": "63",
										"name": "CALC001304",
										"type": "double"
									},
									{
										"key": "64",
										"name": "CALC001363",
										"type": "double"
									},
									{
										"key": "65",
										"name": "CALC001367",
										"type": "double"
									},
									{
										"key": "66",
										"name": "CALC001389",
										"type": "double"
									},
									{
										"key": "67",
										"name": "CALC001440",
										"type": "double"
									},
									{
										"key": "68",
										"name": "CALC001442",
										"type": "double"
									},
									{
										"key": "69",
										"name": "CALC001446",
										"type": "double"
									},
									{
										"key": "70",
										"name": "CALC001510",
										"type": "double"
									},
									{
										"key": "71",
										"name": "CALC001514",
										"type": "double"
									},
									{
										"key": "72",
										"name": "CALC001532",
										"type": "double"
									},
									{
										"key": "73",
										"name": "CALC001538",
										"type": "double"
									},
									{
										"key": "74",
										"name": "CALC001543",
										"type": "double"
									},
									{
										"key": "75",
										"name": "CALC001550",
										"type": "double"
									},
									{
										"key": "76",
										"name": "CALC001553",
										"type": "double"
									},
									{
										"key": "77",
										"name": "CALC001554",
										"type": "double"
									},
									{
										"key": "78",
										"name": "CALC001590",
										"type": "double"
									},
									{
										"key": "79",
										"name": "CALC001598",
										"type": "double"
									},
									{
										"key": "80",
										"name": "CALC001623",
										"type": "double"
									},
									{
										"key": "81",
										"name": "CALC001624",
										"type": "double"
									},
									{
										"key": "82",
										"name": "CALC001626",
										"type": "double"
									},
									{
										"key": "83",
										"name": "CALC001627",
										"type": "double"
									},
									{
										"key": "84",
										"name": "CALC001630",
										"type": "double"
									},
									{
										"key": "85",
										"name": "CALC001632",
										"type": "double"
									},
									{
										"key": "86",
										"name": "CALC001635",
										"type": "double"
									},
									{
										"key": "87",
										"name": "CALC001643",
										"type": "double"
									},
									{
										"key": "88",
										"name": "CALC001658",
										"type": "double"
									},
									{
										"key": "89",
										"name": "CALC001660",
										"type": "double"
									},
									{
										"key": "90",
										"name": "080180-005-ANA005",
										"type": "double"
									},
									{
										"key": "91",
										"name": "080478-006-ANA001",
										"type": "double"
									},
									{
										"key": "92",
										"name": "080478-006-ANA003",
										"type": "double"
									},
									{
										"key": "93",
										"name": "080538-005-ANA001",
										"type": "double"
									},
									{
										"key": "94",
										"name": "080543-002-ANA001",
										"type": "double"
									},
									{
										"key": "95",
										"name": "080826-002-ANA001",
										"type": "double"
									},
									{
										"key": "96",
										"name": "080885-001-ANA001",
										"type": "double"
									},
									{
										"key": "97",
										"name": "080996-007-ANA010",
										"type": "double"
									},
									{
										"key": "98",
										"name": "081141-002-ANA001",
										"type": "double"
									},
									{
										"key": "99",
										"name": "081167-001-ANA002",
										"type": "double"
									},
									{
										"key": "100",
										"name": "081167-001-ANA006",
										"type": "double"
									},
									{
										"key": "101",
										"name": "081167-001-ANA001",
										"type": "double"
									},
									{
										"key": "102",
										"name": "081363-002-ANA001",
										"type": "double"
									},
									{
										"key": "103",
										"name": "081379-001-ANA01",
										"type": "double"
									},
									{
										"key": "104",
										"name": "081445-001-ANA002",
										"type": "double"
									},
									{
										"key": "105",
										"name": "081445-001-ANA003",
										"type": "double"
									},
									{
										"key": "106",
										"name": "081653-001-ANA01",
										"type": "double"
									},
									{
										"key": "107",
										"name": "081751-008-ANA01",
										"type": "double"
									},
									{
										"key": "108",
										"name": "081918-009-ANA001",
										"type": "double"
									},
									{
										"key": "109",
										"name": "082021-001-ANA002",
										"type": "double"
									},
									{
										"key": "110",
										"name": "082172-002-ANA010",
										"type": "double"
									},
									{
										"key": "111",
										"name": "082362-001-ANA001",
										"type": "double"
									},
									{
										"key": "112",
										"name": "082401-002-ANA001",
										"type": "double"
									},
									{
										"key": "113",
										"name": "082457-001-ANA001",
										"type": "double"
									},
									{
										"key": "114",
										"name": "082634-001-ANA013",
										"type": "double"
									},
									{
										"key": "115",
										"name": "082687-002-ANA01",
										"type": "double"
									},
									{
										"key": "116",
										"name": "082747-007-ANA001",
										"type": "double"
									},
									{
										"key": "117",
										"name": "082858-003-ANA01",
										"type": "double"
									},
									{
										"key": "118",
										"name": "082994-002-ANA01",
										"type": "double"
									},
									{
										"key": "119",
										"name": "170059-001-ANA001",
										"type": "double"
									},
									{
										"key": "120",
										"name": "170221-002-ANA001",
										"type": "double"
									},
									{
										"key": "121",
										"name": "170558-002-ANA019",
										"type": "double"
									},
									{
										"key": "122",
										"name": "170561-001-ANA01",
										"type": "double"
									},
									{
										"key": "123",
										"name": "170600-001-ANA008",
										"type": "double"
									},
									{
										"key": "124",
										"name": "170600-001-ANA024",
										"type": "double"
									},
									{
										"key": "125",
										"name": "170656-005-ANA001",
										"type": "double"
									},
									{
										"key": "126",
										"name": "170792-002-ANA001",
										"type": "double"
									},
									{
										"key": "127",
										"name": "171024-001-ANA01",
										"type": "double"
									},
									{
										"key": "128",
										"name": "171143-002-ANA001",
										"type": "double"
									},
									{
										"key": "129",
										"name": "171328-001-ANA001",
										"type": "double"
									},
									{
										"key": "130",
										"name": "171352-003-ANA001",
										"type": "double"
									},
									{
										"key": "131",
										"name": "CALC001682",
										"type": "double"
									},
									{
										"key": "132",
										"name": "CALC001369",
										"type": "double"
									},
									{
										"key": "133",
										"name": "CALC001665",
										"type": "double"
									},
									{
										"key": "134",
										"name": "171903-002-ANA01",
										"type": "double"
									},
									{
										"key": "135",
										"name": "172001-001-ANA01",
										"type": "double"
									},
									{
										"key": "136",
										"name": "080581-003-ANA01",
										"type": "double"
									},
									{
										"key": "137",
										"name": "CALC001670",
										"type": "double"
									},
									{
										"key": "138",
										"name": "CALC001261",
										"type": "double"
									},
									{
										"key": "139",
										"name": "080522-004-ANA01",
										"type": "double"
									},
									{
										"key": "140",
										"name": "CALC001223",
										"type": "double"
									},
									{
										"key": "141",
										"name": "CALC001126",
										"type": "double"
									},
									{
										"key": "142",
										"name": "CALC001669",
										"type": "double"
									},
									{
										"key": "143",
										"name": "CALC001661",
										"type": "double"
									},
									{
										"key": "144",
										"name": "CALC000737",
										"type": "double"
									},
									{
										"key": "145",
										"name": "430862-001-ANA001",
										"type": "double"
									},
									{
										"key": "146",
										"name": "CALC001368",
										"type": "double"
									},
									{
										"key": "147",
										"name": "CALC001441",
										"type": "double"
									},
									{
										"key": "148",
										"name": "CALC001573",
										"type": "double"
									},
									{
										"key": "149",
										"name": "171557-002-ANA007",
										"type": "double"
									},
									{
										"key": "150",
										"name": "080996-007-ANA006",
										"type": "double"
									},
									{
										"key": "151",
										"name": "171674-006-ANA007",
										"type": "double"
									},
									{
										"key": "152",
										"name": "CALC001770",
										"type": "double"
									},
									{
										"key": "153",
										"name": "CALC001256",
										"type": "double"
									},
									{
										"key": "154",
										"name": "081580-002-ANA007",
										"type": "double"
									},
									{
										"key": "155",
										"name": "CALC001622",
										"type": "double"
									},
									{
										"key": "156",
										"name": "082994-001-ANA01",
										"type": "double"
									},
									{
										"key": "157",
										"name": "170084-005-ANA001",
										"type": "double"
									},
									{
										"key": "158",
										"name": "CALC001512",
										"type": "double"
									},
									{
										"key": "159",
										"name": "CALC000181",
										"type": "double"
									},
									{
										"key": "160",
										"name": "CALC001641",
										"type": "double"
									},
									{
										"key": "161",
										"name": "CALC001757",
										"type": "double"
									},
									{
										"key": "162",
										"name": "081831-003-ANA01",
										"type": "double"
									},
									{
										"key": "163",
										"name": "CALC001179",
										"type": "double"
									},
									{
										"key": "164",
										"name": "170792-003-ANA001",
										"type": "double"
									},
									{
										"key": "165",
										"name": "CALC001185",
										"type": "double"
									},
									{
										"key": "166",
										"name": "CALC001186",
										"type": "double"
									},
									{
										"key": "167",
										"name": "CALC001214",
										"type": "double"
									},
									{
										"key": "168",
										"name": "081081-001-ANA002",
										"type": "double"
									},
									{
										"key": "169",
										"name": "CALC001836",
										"type": "double"
									},
									{
										"key": "170",
										"name": "CALC001664",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"373fb318-408a-4b0b-aa18-00bc07a3a4e8": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "0.0",
										"1": "0.0",
										"2": "0.0",
										"4": "0.0",
										"5": "0.0",
										"6": "0.0",
										"7": "0.0",
										"8": "0.0",
										"9": "0.0",
										"10": "0.0",
										"11": "0.0",
										"12": "0.0",
										"13": "0.0",
										"14": "0.0",
										"15": "0.0",
										"16": "0.0",
										"17": "0.0",
										"18": "0.0",
										"19": "0.0",
										"20": "0.0",
										"22": "0.0",
										"23": "0.0",
										"24": "0.0",
										"25": "0.0",
										"26": "0.0",
										"27": "0.0",
										"28": "0.0",
										"29": "0.0",
										"30": "0.0",
										"31": "0.0",
										"32": "0.0",
										"33": "0.0",
										"34": "0.0",
										"35": "0.0",
										"36": "0.0",
										"37": "0.0",
										"39": "0.0",
										"41": "0.0",
										"42": "0.0",
										"43": "0.0",
										"44": "0.0",
										"45": "0.0",
										"46": "0.0"
									},
									{
										"0": "0.0",
										"1": "0.0",
										"2": "0.0",
										"4": "0.0",
										"5": "0.0",
										"6": "0.0",
										"7": "0.0",
										"8": "0.0",
										"9": "0.0",
										"10": "0.0",
										"11": "0.0",
										"12": "0.0",
										"13": "0.0",
										"14": "0.0",
										"15": "0.0",
										"16": "0.0",
										"17": "0.0",
										"18": "0.0",
										"19": "0.0",
										"20": "0.0",
										"22": "0.0",
										"23": "0.0",
										"24": "0.0",
										"25": "0.0",
										"26": "0.0",
										"27": "0.0",
										"28": "0.0",
										"29": "0.0",
										"30": "0.0",
										"31": "0.0",
										"32": "0.0",
										"33": "0.0",
										"34": "0.0",
										"35": "0.0",
										"36": "0.0",
										"37": "0.0",
										"39": "0.0",
										"41": "0.0",
										"42": "0.0",
										"43": "0.0",
										"44": "0.0",
										"45": "0.0",
										"46": "0.0"
									},
									{
										"0": "0.0",
										"1": "0.0",
										"2": "0.0",
										"4": "0.0",
										"5": "0.0",
										"6": "0.0",
										"7": "0.0",
										"8": "0.0",
										"9": "0.0",
										"10": "0.0",
										"11": "0.0",
										"12": "0.0",
										"13": "0.0",
										"14": "0.0",
										"15": "0.0",
										"16": "0.0",
										"17": "0.0",
										"18": "0.0",
										"19": "0.0",
										"20": "0.0",
										"22": "0.0",
										"23": "0.0",
										"24": "0.0",
										"25": "0.0",
										"26": "0.0",
										"27": "0.0",
										"28": "0.0",
										"29": "0.0",
										"30": "0.0",
										"31": "0.0",
										"32": "0.0",
										"33": "0.0",
										"34": "0.0",
										"35": "0.0",
										"36": "0.0",
										"37": "0.0",
										"39": "0.0",
										"41": "0.0",
										"42": "0.0",
										"43": "0.0",
										"44": "0.0",
										"45": "0.0",
										"46": "0.0"
									},
									{
										"0": "0.0",
										"1": "0.0",
										"2": "0.0",
										"4": "0.0",
										"5": "0.0",
										"6": "0.0",
										"7": "0.0",
										"8": "0.0",
										"9": "0.0",
										"10": "0.0",
										"11": "0.0",
										"12": "0.0",
										"13": "0.0",
										"14": "0.0",
										"15": "0.0",
										"16": "0.0",
										"17": "0.0",
										"18": "0.0",
										"19": "0.0",
										"20": "0.0",
										"22": "0.0",
										"23": "0.0",
										"24": "0.0",
										"25": "0.0",
										"26": "0.0",
										"27": "0.0",
										"28": "0.0",
										"29": "0.0",
										"30": "0.0",
										"31": "0.0",
										"32": "0.0",
										"33": "0.0",
										"34": "0.0",
										"35": "0.0",
										"36": "0.0",
										"37": "0.0",
										"39": "0.0",
										"41": "0.0",
										"42": "0.0",
										"43": "0.0",
										"44": "0.0",
										"45": "0.0",
										"46": "0.0"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "080018-005-ANA016",
										"type": "double"
									},
									{
										"key": "1",
										"name": "080462-001-ANA008",
										"type": "double"
									},
									{
										"key": "2",
										"name": "080478-006-ANA004",
										"type": "double"
									},
									{
										"key": "3",
										"name": "080522-004-PLV01",
										"type": "double"
									},
									{
										"key": "4",
										"name": "080538-005-ANA003",
										"type": "double"
									},
									{
										"key": "5",
										"name": "080581-002-ANA009",
										"type": "double"
									},
									{
										"key": "6",
										"name": "080826-002-ANA010",
										"type": "double"
									},
									{
										"key": "7",
										"name": "080996-007-ANA009",
										"type": "double"
									},
									{
										"key": "8",
										"name": "081419-003-ANA006",
										"type": "double"
									},
									{
										"key": "9",
										"name": "081918-009-ANA002",
										"type": "double"
									},
									{
										"key": "10",
										"name": "082021-001-ANA001",
										"type": "double"
									},
									{
										"key": "11",
										"name": "082172-002-ANA014",
										"type": "double"
									},
									{
										"key": "12",
										"name": "082362-001-ANA003",
										"type": "double"
									},
									{
										"key": "13",
										"name": "082401-002-ANA002",
										"type": "double"
									},
									{
										"key": "14",
										"name": "082457-001-ANA002",
										"type": "double"
									},
									{
										"key": "15",
										"name": "082634-001-ANA017",
										"type": "double"
									},
									{
										"key": "16",
										"name": "082687-001-ANA016",
										"type": "double"
									},
									{
										"key": "17",
										"name": "082747-007-ANA003",
										"type": "double"
									},
									{
										"key": "18",
										"name": "083036-001-ANA024",
										"type": "double"
									},
									{
										"key": "19",
										"name": "170059-001-ANA002",
										"type": "double"
									},
									{
										"key": "20",
										"name": "170221-002-ANA002",
										"type": "double"
									},
									{
										"key": "21",
										"name": "170558-002-ANA024",
										"type": "double"
									},
									{
										"key": "22",
										"name": "170656-005-ANA008",
										"type": "double"
									},
									{
										"key": "23",
										"name": "170792-003-ANA002",
										"type": "double"
									},
									{
										"key": "24",
										"name": "171169-001-ANA006",
										"type": "double"
									},
									{
										"key": "25",
										"name": "171328-001-ANA002",
										"type": "double"
									},
									{
										"key": "26",
										"name": "171352-003-ANA007",
										"type": "double"
									},
									{
										"key": "27",
										"name": "171501-001-ANA003",
										"type": "double"
									},
									{
										"key": "28",
										"name": "171707-001-ANA013",
										"type": "double"
									},
									{
										"key": "29",
										"name": "171714-001-ANA04",
										"type": "double"
									},
									{
										"key": "30",
										"name": "171812-001-ANA002",
										"type": "double"
									},
									{
										"key": "31",
										"name": "171899-003-ANA033",
										"type": "double"
									},
									{
										"key": "32",
										"name": "171910-001-ANA002",
										"type": "double"
									},
									{
										"key": "33",
										"name": "251116-004-ANA04",
										"type": "double"
									},
									{
										"key": "34",
										"name": "251462-001-ANA04",
										"type": "double"
									},
									{
										"key": "35",
										"name": "430430-001-ANA001",
										"type": "double"
									},
									{
										"key": "36",
										"name": "430496-001-ANA005",
										"type": "double"
									},
									{
										"key": "37",
										"name": "430496-002-ANA011",
										"type": "double"
									},
									{
										"key": "38",
										"name": "430537-001-ANA007",
										"type": "double"
									},
									{
										"key": "39",
										"name": "430862-001-ANA002",
										"type": "double"
									},
									{
										"key": "40",
										"name": "431652-001-ANA002",
										"type": "double"
									},
									{
										"key": "41",
										"name": "171674-006-ANA009",
										"type": "double"
									},
									{
										"key": "42",
										"name": "250753-004-ANA011",
										"type": "double"
									},
									{
										"key": "43",
										"name": "170600-001-ANA022",
										"type": "double"
									},
									{
										"key": "44",
										"name": "081580-002-ANA008",
										"type": "double"
									},
									{
										"key": "45",
										"name": "080581-003-ANA03",
										"type": "double"
									},
									{
										"key": "46",
										"name": "081081-001-ANA001",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					},
					"0a8d24c2-dbf4-49bd-aab6-9c1f8ff7c488": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "-0.51",
										"1": "318.442",
										"2": "2.5402",
										"3": "319.4894",
										"4": "501.79",
										"5": "0.148",
										"7": "-0.138",
										"21": "6.9638",
										"22": "1.788",
										"23": "-2.916",
										"24": "14.0512",
										"25": "46.368",
										"26": "53.0",
										"27": "-4.874",
										"28": "-3.538",
										"29": "18.04",
										"30": "9190.0",
										"31": "19.3",
										"32": "890.0",
										"33": "16.122",
										"34": "12.484",
										"35": "1510.0",
										"36": "1530.0",
										"37": "-1.21",
										"38": "15.636",
										"39": "4358.0",
										"41": "9.45",
										"42": "5.15",
										"43": "36.29",
										"45": "17.87",
										"46": "20.35",
										"47": "18.17",
										"49": "674.0",
										"50": "5180.0",
										"51": "1218.0",
										"52": "16.39",
										"53": "17.224",
										"54": "18.01",
										"55": "19128.0",
										"56": "25770.0",
										"57": "1.074",
										"58": "-0.378"
									},
									{
										"0": "-0.512",
										"1": "318.47",
										"2": "2.719",
										"3": "319.729",
										"4": "501.782",
										"5": "-0.237",
										"7": "-0.13",
										"21": "6.948",
										"22": "1.78",
										"23": "-2.992",
										"24": "14.067",
										"25": "46.358",
										"26": "53.0",
										"27": "-4.932",
										"28": "-3.538",
										"29": "18.04",
										"30": "9190.0",
										"31": "19.3",
										"32": "890.0",
										"33": "16.106",
										"34": "12.484",
										"35": "1500.0",
										"36": "1530.0",
										"37": "-1.212",
										"38": "15.622",
										"39": "4276.0",
										"40": "2.834",
										"41": "9.304",
										"42": "5.144",
										"43": "36.27",
										"44": "18.05",
										"45": "17.866",
										"46": "20.35",
										"47": "18.164",
										"48": "630.0",
										"49": "702.0",
										"50": "5178.0",
										"51": "1220.0",
										"52": "16.39",
										"53": "17.232",
										"54": "18.01",
										"55": "19110.0",
										"56": "25770.0",
										"57": "1.042",
										"58": "-0.384"
									},
									{
										"0": "-0.528",
										"1": "318.496",
										"2": "2.7542",
										"3": "319.781",
										"4": "501.78",
										"5": "-0.175",
										"7": "-0.146",
										"21": "6.9486",
										"22": "1.776",
										"23": "-2.92",
										"24": "14.0524",
										"25": "46.374",
										"26": "53.0",
										"27": "-5.006",
										"28": "-3.544",
										"29": "18.04",
										"30": "9190.0",
										"31": "19.3",
										"32": "890.0",
										"33": "16.09",
										"34": "12.45",
										"35": "1500.0",
										"36": "1530.0",
										"37": "-1.22",
										"38": "15.646",
										"39": "4246.0",
										"40": "2.842",
										"41": "9.438",
										"42": "5.136",
										"43": "36.07",
										"44": "18.05",
										"45": "17.862",
										"46": "20.35",
										"47": "18.184",
										"48": "630.0",
										"49": "726.0",
										"50": "5174.0",
										"51": "1220.0",
										"52": "16.39",
										"53": "17.23",
										"54": "18.01",
										"55": "19058.0",
										"56": "25770.0",
										"57": "1.05",
										"58": "-0.388"
									},
									{
										"0": "-0.53",
										"1": "318.476",
										"2": "2.5094",
										"3": "319.4222",
										"4": "501.784",
										"5": "-0.012",
										"7": "-0.15",
										"21": "6.95",
										"22": "1.77",
										"23": "-2.908",
										"24": "14.0706",
										"25": "46.322",
										"27": "-4.928",
										"28": "-3.54",
										"29": "18.04",
										"30": "9190.0",
										"31": "19.3",
										"32": "890.0",
										"33": "16.08",
										"35": "1500.0",
										"37": "-1.22",
										"38": "15.658",
										"39": "4272.0",
										"40": "2.828",
										"41": "9.602",
										"42": "5.15",
										"43": "36.076",
										"44": "18.05",
										"45": "17.86",
										"46": "20.35",
										"47": "18.202",
										"48": "630.0",
										"49": "700.0",
										"50": "5186.0",
										"51": "1210.0",
										"52": "16.392",
										"53": "17.226",
										"54": "18.01",
										"55": "19026.0",
										"56": "25770.0",
										"57": "1.096",
										"58": "-0.35"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "081108-002-ANA03",
										"type": "double"
									},
									{
										"key": "1",
										"name": "080484-001-ANA01",
										"type": "double"
									},
									{
										"key": "2",
										"name": "081555-001-ANA01",
										"type": "double"
									},
									{
										"key": "3",
										"name": "080446-001-ANA01",
										"type": "double"
									},
									{
										"key": "4",
										"name": "082858-003-ANA02",
										"type": "double"
									},
									{
										"key": "5",
										"name": "081108-003-ANA03",
										"type": "double"
									},
									{
										"key": "6",
										"name": "170237-002-ANA02",
										"type": "double"
									},
									{
										"key": "7",
										"name": "170237-003-ANA02",
										"type": "double"
									},
									{
										"key": "8",
										"name": "CALC001715",
										"type": "double"
									},
									{
										"key": "9",
										"name": "CALC001716",
										"type": "double"
									},
									{
										"key": "10",
										"name": "CALC001718",
										"type": "double"
									},
									{
										"key": "11",
										"name": "CALC001720",
										"type": "double"
									},
									{
										"key": "12",
										"name": "CALC001721",
										"type": "double"
									},
									{
										"key": "13",
										"name": "CALC001722",
										"type": "double"
									},
									{
										"key": "14",
										"name": "CALC001724",
										"type": "double"
									},
									{
										"key": "15",
										"name": "CALC001726",
										"type": "double"
									},
									{
										"key": "16",
										"name": "CALC001727",
										"type": "double"
									},
									{
										"key": "17",
										"name": "CALC001728",
										"type": "double"
									},
									{
										"key": "18",
										"name": "CALC001714",
										"type": "double"
									},
									{
										"key": "19",
										"name": "CALC001730",
										"type": "double"
									},
									{
										"key": "20",
										"name": "CALC001731",
										"type": "double"
									},
									{
										"key": "21",
										"name": "171910-001-ANA004",
										"type": "double"
									},
									{
										"key": "22",
										"name": "170622-001-ANA03",
										"type": "double"
									},
									{
										"key": "23",
										"name": "171997-003-ANA03",
										"type": "double"
									},
									{
										"key": "24",
										"name": "171061-001-ANA01",
										"type": "double"
									},
									{
										"key": "25",
										"name": "080018-006-ANA01",
										"type": "double"
									},
									{
										"key": "26",
										"name": "080018-007-ANA01",
										"type": "double"
									},
									{
										"key": "27",
										"name": "081691-009-ANA01",
										"type": "double"
									},
									{
										"key": "28",
										"name": "080193-013-ANA01",
										"type": "double"
									},
									{
										"key": "29",
										"name": "081691-009-ANA02",
										"type": "double"
									},
									{
										"key": "30",
										"name": "081691-009-ANA03",
										"type": "double"
									},
									{
										"key": "31",
										"name": "080193-013-ANA02",
										"type": "double"
									},
									{
										"key": "32",
										"name": "080193-013-ANA03",
										"type": "double"
									},
									{
										"key": "33",
										"name": "080018-006-ANA02",
										"type": "double"
									},
									{
										"key": "34",
										"name": "080018-007-ANA02",
										"type": "double"
									},
									{
										"key": "35",
										"name": "080018-006-ANA03",
										"type": "double"
									},
									{
										"key": "36",
										"name": "080018-007-ANA03",
										"type": "double"
									},
									{
										"key": "37",
										"name": "170470-004-ANA01",
										"type": "double"
									},
									{
										"key": "38",
										"name": "170470-004-ANA02",
										"type": "double"
									},
									{
										"key": "39",
										"name": "170470-004-ANA03",
										"type": "double"
									},
									{
										"key": "40",
										"name": "430923-001-ANA01",
										"type": "double"
									},
									{
										"key": "41",
										"name": "430923-002-ANA01",
										"type": "double"
									},
									{
										"key": "42",
										"name": "431233-001-ANA01",
										"type": "double"
									},
									{
										"key": "43",
										"name": "431093-001-ANA01",
										"type": "double"
									},
									{
										"key": "44",
										"name": "430923-001-ANA02",
										"type": "double"
									},
									{
										"key": "45",
										"name": "430923-002-ANA02",
										"type": "double"
									},
									{
										"key": "46",
										"name": "431233-001-ANA02",
										"type": "double"
									},
									{
										"key": "47",
										"name": "431093-001-ANA02",
										"type": "double"
									},
									{
										"key": "48",
										"name": "430923-001-ANA03",
										"type": "double"
									},
									{
										"key": "49",
										"name": "430923-002-ANA03",
										"type": "double"
									},
									{
										"key": "50",
										"name": "431233-001-ANA03",
										"type": "double"
									},
									{
										"key": "51",
										"name": "431093-001-ANA03",
										"type": "double"
									},
									{
										"key": "52",
										"name": "171061-001-ANA03",
										"type": "double"
									},
									{
										"key": "53",
										"name": "170926-001-ANA02",
										"type": "double"
									},
									{
										"key": "54",
										"name": "171404-001-ANA02",
										"type": "double"
									},
									{
										"key": "55",
										"name": "170926-001-ANA03",
										"type": "double"
									},
									{
										"key": "56",
										"name": "171404-001-ANA03",
										"type": "double"
									},
									{
										"key": "57",
										"name": "170926-001-ANA01",
										"type": "double"
									},
									{
										"key": "58",
										"name": "171404-001-ANA01",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e6a89ab3-ce27-4148-bad8-97a6fee2010c/resourceGroups/FergusAssam/providers/Microsoft.Synapse/workspaces/water-crisis/bigDataPools/WaterSparkPool",
				"name": "WaterSparkPool",
				"type": "Spark",
				"endpoint": "https://water-crisis.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/WaterSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# <div style=\"color:#fff;display:fill;border-radius:15px;background-color:#328ada;text-align:left;letter-spacing:0.1px;overflow:hidden;padding:5px;color:white;overflow:hidden;margin:0;font-size:80%\">Epic Internship</div>"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## <div style=\"color:#fff;display:fill;border-radius:10px;background-color:#328ada;text-align:left;letter-spacing:0.1px;overflow:hidden;padding:20px;color:white;overflow:hidden;margin:0;font-size:80%\"> 🔧📗ET Code for the \"🏞️Catalonia Water Resource Daily🚰\" Dataset.</div>\r\n",
					"\r\n",
					"This Notebook is, **scheduled** to run automatically on a **daily** basis in a pipeline, in order to extract information from the public API of the [ACA - Agència Catalana de l'Aigua](https://aca.gencat.cat/) (Catalan Water Agency). This API contains the **real-time value reads from 4 types of sensors** (Reservoir Level Sensors, Gauging Sensors, Pluviometer Sensors, and Piezometer Sensors) placed around the **Catalan region** in Spain. It also contains Metadata information which is extracted and saved in another supplementary Notebook(copy_metadata_monthly), and later imported here.\r\n",
					"\r\n",
					"#### Internship Business Case:\r\n",
					"\r\n",
					"Catalonia is currently experiencing a dry period, characterized by reduced precipitation and lower-than-average water levels in reservoirs and rivers as well as in other regions. Struggling with water reserve levels already, the goal of this internship is to come up with actionable insights that will help the government make informed decisions and solutions that will benefit the community and the region at large.\r\n",
					"\r\n",
					"##### Note:\r\n",
					"Data is uploaded from the sensors at different time intervals but the data is collected and average taken for the closet time on all the 4 categories.\r\n",
					"\r\n",
					"## <div style=\"color:#fff;display:fill;border-radius:15px;background-color:#328ada;text-align:left;letter-spacing:0.1px;overflow:hidden;padding:5px;color:white;overflow:hidden;margin:0;font-size:80%\"></div>\r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Parameters and Libraries"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create a parameter that will be used to change read folder and mode dynamically in the pipeline"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Get the version of the folder from the Bronze layer and this will be used as a parameter in the pipeline (Toggled as a parameter)\r\n",
					"oldFolder = \"Version_3165\"\r\n",
					"FolderName = \"Version_3165\"\r\n",
					"Mode = \"overwrite\" \r\n",
					"MetaFolder = \"Metadata\"\r\n",
					"category = ['reservoir','gauge','pluviometer', 'piezometer']\r\n",
					"meta_end = '_sensors_metadata'\r\n",
					"meta_path = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}/{MetaFolder}\"\r\n",
					"sensors_reads_path = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}\"\r\n",
					"sensors_end = '_sensors_reads'\r\n",
					"#For the first time it overwrites and for subsequent notebooks, it apppends which is adjusted via the pipeline\r\n",
					"# Also live data can be extracted from the API."
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Generate the dataset Folder incrementally"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"FolderName_SeperatorRemoved = FolderName.replace(\"_\",\"\")\r\n",
					"VersionName = FolderName.split('_')[0]\r\n",
					"VersionNum = FolderName.split('_')[1]"
				],
				"execution_count": 66
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Import Libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql import functions as F, Row\r\n",
					"from pyspark.sql.functions import lit,col,regexp_replace,to_date,count,sum,coalesce,to_timestamp, current_date, date_sub #add constant or literal value as a new column to the DataFrame. #regexp_replace to replace a character in a string\r\n",
					"from pyspark.sql.types import DateType\r\n",
					"from datetime import datetime, timedelta\r\n",
					"from tqdm.notebook import tqdm\r\n",
					"import re\r\n",
					"#from pathlib import Path\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"from scipy.stats import zscore\r\n",
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"import requests,json,os\r\n",
					"from notebookutils import mssparkutils\r\n",
					"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
					"#If you check the schema table, you will notice the column Timestamp is stored as (M.D.Y.hh.mm). \r\n",
					"#inorder to handle unforseen exception error. eg October, Oct ,oct, 10, we use the timeParserPolicy=LEGACY to fix this."
				],
				"execution_count": 160
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create Connections"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Spark Session & blob connection\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create Spark Session and connection to blob storage. It is created in the Notebook and not in the pipeline. \r\n",
					"#You can only set Spark configuration properties that start with the spark.sql prefix.\r\n",
					"# \"\"\"You can have many spark sessions but only 1 spark context (like spark driver). It is better in the notebook because\r\n",
					"# It already has access to the underlying Spark features for creating RDD and dataframe.\"\"\"\r\n",
					"\r\n",
					"blob_account = \"waterstorageaccount\"\r\n",
					"blob_container = \"BronzeLayer\"\r\n",
					"\r\n",
					"sc = SparkSession.builder.getOrCreate()\r\n",
					"#getConnectionString()\r\n",
					"token_library = sc._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"dls_sas_token = token_library.getConnectionString(\"water-crisis-WorkspaceDefaultStorage\")\r\n",
					"spark.conf.set(\r\n",
					"    'fs.azure.sas.{}.{}.blob.core.windows.net' .format(blob_container, blob_account),\r\n",
					"    dls_sas_token)\r\n",
					"\r\n",
					"#https://projectwatercrisis.dfs.core.windows.net/waterstorageaccount/BronzeLayer/Version_322/gauge_sensors_reads.csv\r\n",
					""
				],
				"execution_count": 68
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Copy Previous Data To New Folder For Append\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # list sub folders\r\n",
					"# mssparkutils.fs.ls(f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/\")\r\n",
					"\r\n",
					"# # Create New Folder\r\n",
					"# mssparkutils.fs.mkdirs(f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}\")\r\n",
					"\r\n",
					"# # Copy Old data to New Folder\r\n",
					"# old_data_path = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{oldFolder}/*\"\r\n",
					"# new_folder_path = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}\"\r\n",
					"# mssparkutils.fs.fastcp(f\"{old_data_path}\", f\"{new_folder_path}\", True) # Set the third parameter as True to copy all files and directories recursively"
				],
				"execution_count": 69
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Dynamic Delimiter"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Use Regex to read the header, determine the delimiter from a set of predefined common delimiters \r\n",
					"# and store it as a variable then use that variable as a delimiter\r\n",
					"def f_get_delimiter (source_path):\r\n",
					"    try:\r\n",
					"        print(\"Source Path:\", source_path)  # Debug: Print the source path\r\n",
					"        headerlist = spark.sparkContext.textFile(source_path).take(1)\r\n",
					"        header_str = ''.join(headerlist)\r\n",
					"\r\n",
					"        results= re.search(\"(,|;|\\\\|)\",header_str)\r\n",
					"        return results.group()\r\n",
					"    except Exception as err:\r\n",
					"        print(\"Error Occured \", str(err))"
				],
				"execution_count": 70
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Import Metadatas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reservoir_meta_path = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}/{MetaFolder}/{category[0]}{meta_end}.csv\"\r\n",
					"gauge_meta_path = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}/{MetaFolder}/{category[1]}{meta_end}.csv\"\r\n",
					"pluviometer_meta_path = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}/{MetaFolder}/{category[2]}{meta_end}.csv\"\r\n",
					"piezometer_meta_path= f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}/{MetaFolder}/{category[3]}{meta_end}.csv\"\r\n",
					""
				],
				"execution_count": 71
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Dynamic Delimiter"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gauge_delimiter = (f_get_delimiter(gauge_meta_path))\r\n",
					"print('Gauge Delimiter: ', gauge_delimiter)\r\n",
					"piezometer_delimiter = (f_get_delimiter(piezometer_meta_path))\r\n",
					"print('Piezometer Delimiter: ', piezometer_delimiter)\r\n",
					"pluviometer_delimiter = (f_get_delimiter(pluviometer_meta_path))\r\n",
					"print('Pluviometer Delimiter: ', pluviometer_delimiter)\r\n",
					"reservoir_delimiter = (f_get_delimiter(reservoir_meta_path))\r\n",
					"print('Reservoir Delimiter: ', reservoir_delimiter)"
				],
				"execution_count": 72
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Load"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# f\"{category[0]}{meta_end}\" = spark.read.load(gauge_meta_path, format = 'csv',inferschema = True,header=true,delimiter=gauge_delimiter)"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"gauge_sensors_metadata = spark.read.load(gauge_meta_path, format = 'csv',inferschema = True,header=True,delimiter=gauge_delimiter)\r\n",
					"reservoir_sensors_metadata = spark.read.load(reservoir_meta_path, format = 'csv',inferschema = True,header=True,delimiter=reservoir_delimiter)\r\n",
					"pluviometer_sensors_metadata = spark.read.load(pluviometer_meta_path, format = 'csv',inferschema = True,header=True,delimiter=pluviometer_delimiter)\r\n",
					"piezometer_sensors_metadata = spark.read.load(piezometer_meta_path, format = 'csv',inferschema = True,header=True,delimiter=piezometer_delimiter)\r\n",
					"\r\n",
					"print(\"All Metadata Loaded\")\r\n",
					""
				],
				"execution_count": 74
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Extract Sensor ids\r\n",
					"Sensor ids will be extracted from the metadata and used to create the sensor readings dataframe"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Reservoir"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get sensor IDs from the DataFrame\r\n",
					"reservoir_sensors_ids = reservoir_sensors_metadata.select(\"sensor_id\").toPandas()['sensor_id'].tolist()\r\n",
					"#print(\"\\nSensor IDs:\")\r\n",
					"#reservoir_sensors_ids.show()\r\n",
					"\r\n",
					"# Group by description and count occurrences\r\n",
					"description_counts = reservoir_sensors_metadata.groupBy(\"description\").agg(count(\"*\").alias(\"count\"))\r\n",
					"print(\"\\nDescriptions:\")\r\n",
					"description_counts.show()\r\n",
					"\r\n",
					"# # Group by unit and count occurrences\r\n",
					"# unit_counts = reservoir_sensors_metadata.groupBy(\"unit\").agg(count(\"*\").alias(\"count\"))\r\n",
					"# print(\"\\nUnits:\")\r\n",
					"# unit_counts.show()"
				],
				"execution_count": 90
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Piezometer"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get sensor IDs from the DataFrame\r\n",
					"piezometer_sensors_ids = piezometer_sensors_metadata.select(\"sensor_id\").toPandas()['sensor_id'].tolist()\r\n",
					"#print(\"\\nSensor IDs:\")\r\n",
					"#piezometer_sensors_ids.show()\r\n",
					"\r\n",
					"# Group by description and count occurrences\r\n",
					"description_counts = piezometer_sensors_metadata.groupBy(\"description\").agg(count(\"*\").alias(\"count\"))\r\n",
					"print(\"\\nDescriptions:\")\r\n",
					"description_counts.show()\r\n",
					"\r\n",
					"# # Group by unit and count occurrences\r\n",
					"# unit_counts = piezometer_sensors_metadata.groupBy(\"unit\").agg(count(\"*\").alias(\"count\"))\r\n",
					"# print(\"\\nUnits:\")\r\n",
					"# unit_counts.show()"
				],
				"execution_count": 91
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Pluviometer"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get sensor IDs from the DataFrame\r\n",
					"pluviometer_sensors_ids = pluviometer_sensors_metadata.select(\"sensor_id\").toPandas()['sensor_id'].tolist()\r\n",
					"#print(\"\\nSensor IDs:\")\r\n",
					"#pluviometer_sensors_ids.show()\r\n",
					"\r\n",
					"# Group by description and count occurrences\r\n",
					"description_counts = pluviometer_sensors_metadata.groupBy(\"description\").agg(count(\"*\").alias(\"count\"))\r\n",
					"print(\"\\nDescriptions:\")\r\n",
					"description_counts.show()\r\n",
					"\r\n",
					"# # Group by unit and count occurrences\r\n",
					"# unit_counts = pluviometer_sensors_metadata.groupBy(\"unit\").agg(count(\"*\").alias(\"count\"))\r\n",
					"# print(\"\\nUnits:\")\r\n",
					"# unit_counts.show()"
				],
				"execution_count": 92
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Gauge"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Get sensor IDs from the DataFrame\r\n",
					"gauge_sensors_ids = gauge_sensors_metadata.select(\"sensor_id\").toPandas()['sensor_id'].tolist()\r\n",
					"#print(\"\\nSensor IDs:\")\r\n",
					"#gauge_sensors_ids.show()\r\n",
					"\r\n",
					"# Group by description and count occurrences\r\n",
					"description_counts = gauge_sensors_metadata.groupBy(\"description\").agg(count(\"*\").alias(\"count\"))\r\n",
					"print(\"\\nDescriptions:\")\r\n",
					"description_counts.show()\r\n",
					"\r\n",
					"# Group by unit and count occurrences\r\n",
					"unit_counts = gauge_sensors_metadata.groupBy(\"unit\").agg(count(\"*\").alias(\"count\"))\r\n",
					"print(\"\\nUnits:\")\r\n",
					"unit_counts.show()"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# print(reservoir_sensors_ids)"
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The sensors ids will be the names of the columns of the DataFrames where the read values will be stored\r\n",
					"groups_cols_ids = [reservoir_sensors_ids, gauge_sensors_ids, pluviometer_sensors_ids, piezometer_sensors_ids]\r\n",
					"# print(groups_cols_ids)"
				],
				"execution_count": 98
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Data Extraction And Transformation"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Load API Files"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### API Links and Extraction"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"groups_cols_ids = [reservoir_sensors_ids, gauge_sensors_ids, pluviometer_sensors_ids, piezometer_sensors_ids]\r\n",
					"\r\n",
					"\r\n",
					"# Sensors Data Endpoints\r\n",
					"URL_RESERVOIR_DATA = 'http://aca-web.gencat.cat/sdim2/apirest/data/EMBASSAMENT-EST'\r\n",
					"URL_GAUGE_DATA = 'http://aca-web.gencat.cat/sdim2/apirest/data/AFORAMENT-EST'\r\n",
					"URL_PLUVIOMETER_DATA = 'http://aca-web.gencat.cat/sdim2/apirest/data/PLUVIOMETREACA-EST'\r\n",
					"URL_PIEZOMETER_DATA = 'http://aca-web.gencat.cat/sdim2/apirest/data/PIEZOMETRE-EST'\r\n",
					"\r\n",
					"urls_data = [URL_RESERVOIR_DATA, URL_GAUGE_DATA, URL_PLUVIOMETER_DATA, URL_PIEZOMETER_DATA]\r\n",
					"\r\n",
					"# Function to extract data from API endpoints\r\n",
					"def extract_data_from_api(url):\r\n",
					"    response = requests.get(url)\r\n",
					"    \r\n",
					"    # Check if the request was successful (status code 200)\r\n",
					"    if response.status_code == 200:\r\n",
					"        json_data = response.json()\r\n",
					"        return json_data\r\n",
					"    else:\r\n",
					"        print(f\"Failed to fetch data from {url}: Status Code {response.status_code}\")\r\n",
					"        return None"
				],
				"execution_count": 99
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Get Previous Day Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_sensors_data_day(read_date_dt=datetime.now()-timedelta(days=1), groups_cols_ids=groups_cols_ids, urls_data=urls_data):\r\n",
					"    \r\n",
					"    all_dfs_sensors_day = []\r\n",
					"    \r\n",
					"    for cols_ids, url_data in zip(groups_cols_ids, urls_data):\r\n",
					"        df_sensor_data_day = pd.DataFrame(columns=cols_ids)\r\n",
					"        \r\n",
					"        time_ranges = [read_date_dt.replace(hour=i, minute=0, second=0, microsecond=0) for i in [0, 6, 12, 18]]\r\n",
					"        for tr in time_ranges:\r\n",
					"            dt_from = tr - timedelta(hours=6)\r\n",
					"            dt_to = tr\r\n",
					"            #print(url_data + f\"/?limit=5&from={dt_from.strftime('%d/%m/%YT%H:%M:%S')}&to={(dt_to).strftime('%d/%m/%YT%H:%M:%S')}\")\r\n",
					"            data_day = extract_data_from_api(url_data + f\"/?limit=5&from={dt_from.strftime('%d/%m/%YT%H:%M:%S')}&to={(dt_to + timedelta(hours=6)).strftime('%d/%m/%YT%H:%M:%S')}\")\r\n",
					"            \r\n",
					"            for sensor in data_day[\"sensors\"]:\r\n",
					"                sensor_id = sensor[\"sensor\"]\r\n",
					"                #print(\"sensor_id:\", sensor_id, end=\" \")\r\n",
					"                # averaging up to the last 5 reads to get a more steady value\r\n",
					"                if sensor[\"observations\"]:\r\n",
					"                    value = np.mean([float(obs[\"value\"]) for obs in sensor[\"observations\"]]).round(4)\r\n",
					"                    df_sensor_data_day.loc[dt_to, sensor_id] = value\r\n",
					"                \r\n",
					"        all_dfs_sensors_day.append(df_sensor_data_day)\r\n",
					"        \r\n",
					"    return all_dfs_sensors_day\r\n",
					"print(get_sensors_data_day())\r\n",
					""
				],
				"execution_count": 107
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": true,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"# def get_sensors_data_day(read_date_dt=datetime.now() - timedelta(days=1), groups_cols_ids=None, urls_data=None):\r\n",
					"#     if urls_data is None:\r\n",
					"#         urls_data = [\r\n",
					"#             'http://aca-web.gencat.cat/sdim2/apirest/data/EMBASSAMENT-EST',\r\n",
					"#             'http://aca-web.gencat.cat/sdim2/apirest/data/AFORAMENT-EST',\r\n",
					"#             'http://aca-web.gencat.cat/sdim2/apirest/data/PLUVIOMETREACA-EST',\r\n",
					"#             'http://aca-web.gencat.cat/sdim2/apirest/data/PIEZOMETRE-EST'\r\n",
					"#         ]\r\n",
					"    \r\n",
					"#     if groups_cols_ids is None:\r\n",
					"#         groups_cols_ids = [\r\n",
					"#             reservoir_sensors_ids,\r\n",
					"#             gauge_sensors_ids,\r\n",
					"#             pluviometer_sensors_ids,\r\n",
					"#             piezometer_sensors_ids\r\n",
					"#         ]\r\n",
					"#     all_dfs_sensors_day = []\r\n",
					"    \r\n",
					"#     time_ranges = [read_date_dt.replace(hour=i, minute=0, second=0, microsecond=0) for i in [0, 6, 12, 18]]\r\n",
					"    \r\n",
					"#     for cols_ids, url_data in zip(groups_cols_ids, urls_data):\r\n",
					"#         # List to collect temporary DataFrames\r\n",
					"#         temp_dfs = []\r\n",
					"        \r\n",
					"#         for tr in time_ranges:\r\n",
					"#             dt_from = tr - timedelta(hours=6)\r\n",
					"#             dt_to = tr\r\n",
					"#             data_day = extract_data_from_api(url_data + f\"/?limit=5&from={dt_from.strftime('%d/%m/%YT%H:%M:%S')}&to={(dt_to + timedelta(hours=6)).strftime('%d/%m/%YT%H:%M:%S')}\")\r\n",
					"            \r\n",
					"#             # Create a temporary DataFrame to store current time range data\r\n",
					"#             temp_data = []\r\n",
					"#             for sensor in data_day[\"sensors\"]:\r\n",
					"#                 sensor_id = sensor[\"sensor\"]\r\n",
					"#                 if sensor[\"observations\"]:\r\n",
					"#                     value = np.mean([float(obs[\"value\"]) for obs in sensor[\"observations\"]]).round(4)\r\n",
					"#                     temp_data.append(pd.DataFrame({sensor_id: value}, index=[dt_to]))\r\n",
					"            \r\n",
					"#             # Concatenate current time range data\r\n",
					"#             if temp_data:\r\n",
					"#                 temp_dfs.append(pd.concat(temp_data, axis=1))\r\n",
					"        \r\n",
					"#         # Concatenate all temporary DataFrames to create the final DataFrame for this URL\r\n",
					"#         if temp_dfs:\r\n",
					"#             df_sensor_data_day = pd.concat(temp_dfs, axis=0).reindex(columns=cols_ids)\r\n",
					"#             all_dfs_sensors_day.append(df_sensor_data_day)\r\n",
					"    \r\n",
					"#     return all_dfs_sensors_day\r\n",
					"\r\n",
					"# def display_data_frames(data_frames):\r\n",
					"#     for idx, df in enumerate(data_frames):\r\n",
					"#         print(f\"DataFrame {idx + 1}:\")\r\n",
					"#         display(df)\r\n",
					"#         print(\"-\" * 80)  # Print a separator line for better readability\r\n",
					"\r\n",
					"# # Assume `get_sensors_data_day()` has been called and its output is stored in a variable:\r\n",
					"# dfs = get_sensors_data_day()\r\n",
					"\r\n",
					"# # Display the DataFrames\r\n",
					"# display_data_frames(dfs)"
				],
				"execution_count": 112
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Previous Data Path"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"# Importing all previous data\r\n",
					"# Define the list of file paths for old data\r\n",
					"#DATA_PATH = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}\"\r\n",
					"DATA_PATH = f\"abfss://waterstorageaccount@projectwatercrisis.dfs.core.windows.net/BronzeLayer/{FolderName}\"\r\n",
					"list_paths_old_data = [\r\n",
					"    DATA_PATH + f\"/{category[0]}{sensors_end}.csv\",\r\n",
					"    DATA_PATH + f\"/{category[1]}{sensors_end}.csv\",\r\n",
					"    DATA_PATH + f\"/{category[2]}{sensors_end}.csv\",\r\n",
					"    DATA_PATH + f\"/{category[3]}{sensors_end}.csv\",\r\n",
					"]\r\n",
					"\r\n",
					"# Check if the first file exists using mssparkutils\r\n",
					"if mssparkutils.fs.exists(list_paths_old_data[0]):\r\n",
					"    print(\"Previous Files Found, Loading now \")\r\n",
					"    #list_all_old_data_s = [spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(path) for path in list_paths_old_data]\r\n",
					"    list_all_old_data = [pd.read_csv(path_old_data, parse_dates=[0], index_col=0) for path_old_data in list_paths_old_data]\r\n",
					"else:\r\n",
					"    print(\"No existing File, Initiate first Run\")\r\n",
					"    #list_all_old_data_s = None\r\n",
					"    list_all_old_data = None\r\n",
					"\r\n",
					""
				],
				"execution_count": 115
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### New Df or Append Data\r\n",
					"For the first time, the data is needs to populate the df thus takes a long time."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"# If it's the first run and there is no data from previous days:\r\n",
					"# Example check if both variables are None\r\n",
					"#if list_all_old_data_s is None and list_all_old_data_p is None:\r\n",
					"if list_all_old_data is None:\r\n",
					"    print(\"variables are None\")\r\n",
					"    # Checking if the directory doesn't exists and create folder\r\n",
					"    if not mssparkutils.fs.exists(meta_path):\r\n",
					"        mssparkutils.fs.mkdirs(meta_path)\r\n",
					"    # Saving metadata in Dataset for the first time\r\n",
					"\r\n",
					"    reservoir_sensors_metadata.toPandas().to_csv(f\"{meta_path}/reservoir_sensors_metadata.csv\", index=False)\r\n",
					"    gauge_sensors_metadata.toPandas().to_csv(f\"{meta_path}/gauge_sensors_metadata.csv\", index=False)\r\n",
					"    pluviometer_sensors_metadata.toPandas().to_csv(f\"{meta_path}/pluviometer_sensors_metadata.csv\", index=False)\r\n",
					"    piezometer_sensors_metadata.toPandas().to_csv(f\"{meta_path}/piezometer_sensors_metadata.csv\", index=False)\r\n",
					"\r\n",
					"    list_all_data = [[] for _ in range(4)]\r\n",
					"    \r\n",
					"    # Requesting the data for all sensors for the last 3 months, which is the max. stored in the public ACA API\r\n",
					"    for d in tqdm(range(89, 0, -1)):\r\n",
					"        print(d)\r\n",
					"        read_date_dt = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=d)\r\n",
					"        all_dfs_sensors_day = get_sensors_data_day(read_date_dt=read_date_dt)\r\n",
					"        \r\n",
					"        for i in range(4):\r\n",
					"            list_all_data[i].append(all_dfs_sensors_day[i])\r\n",
					"        \r\n",
					"    list_all_old_data = [pd.concat(dfs_sensor_data, axis=0) for dfs_sensor_data in list_all_data]\r\n",
					"    \r\n",
					"else:  \r\n",
					"    # Normal daily update\r\n",
					"    read_date_dt = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=1)\r\n",
					"    print(\"Old data found, requesting and updating previous day's sensor reads...\")\r\n",
					"\r\n",
					"    last_dfs_sensors_day = get_sensors_data_day(read_date_dt=read_date_dt)\r\n",
					"\r\n",
					"    list_all_old_data = [pd.concat([old_df_sensor, last_df_sensor], axis=0) for old_df_sensor, last_df_sensor in zip(list_all_old_data, last_dfs_sensors_day)]\r\n",
					"    list_all_old_data = [df_sensor.sort_index(ascending=False) for df_sensor in list_all_old_data]\r\n",
					"    list_all_old_data = [df_sensor[~df_sensor.index.duplicated(keep=\"first\")] for df_sensor in list_all_old_data]\r\n",
					""
				],
				"execution_count": 116
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### YESTERDAY CORRECT"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# # Calculate the date for one day ago\r\n",
					"# read_date_dt = datetime.now() - timedelta(days=1)\r\n",
					"\r\n",
					"# # Calculate the beginning of the current day\r\n",
					"# dt_to = datetime(read_date_dt.year, read_date_dt.month, read_date_dt.day, 0, 0, 0)\r\n",
					"\r\n",
					"# # Calculate the beginning of the previous day\r\n",
					"# dt_from = dt_to - timedelta(days=1)\r\n",
					"\r\n",
					"# # Calculate dt_to as the last second of the previous day\r\n",
					"# dt_to -= timedelta(seconds=1)\r\n",
					"# print(\"dt_from:\", dt_from)\r\n",
					"# print(\"dt_to:\", dt_to)\r\n",
					"# # Construct the full URL with the time range\r\n",
					"# url_data1 = 'http://aca-web.gencat.cat/sdim2/apirest/data/EMBASSAMENT-EST'\r\n",
					"# url_full = url_data1 + f\"/?limit=25&from={dt_from.strftime('%d/%m/%YT%H:%M:%S')}&to={dt_to.strftime('%d/%m/%YT%H:%M:%S')}\"\r\n",
					"\r\n",
					"# # Print the URL for debugging\r\n",
					"# print(f\"Fetching data from: {url_full}\")  \r\n",
					"\r\n",
					"# # Fetch data from API for the time range\r\n",
					"# data_day = extract_data_from_api(url_full)\r\n",
					"\r\n",
					"# # Debug print to see the API response\r\n",
					"# display(data_day)\r\n",
					""
				],
				"execution_count": 117
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Data Loading"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(f\"{sensors_reads_path}/{category[0]}{sensors_end}\")"
				],
				"execution_count": 149
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"if list_all_old_data is not None:\r\n",
					"    for category, df_sensor_data in zip(category, list_all_old_data):\r\n",
					"        print(f\"DataFrame for {category}:\")\r\n",
					"        print(df_sensor_data)\r\n",
					"        df_sensor_data.to_csv(f\"{sensors_reads_path}/{category}{sensors_end}.csv\")\r\n",
					"        print(f\"CSV file for {category} successfully stored\")\r\n",
					"else:\r\n",
					"    print(\"list_all_old_data is None. Please initialize it before iterating.\")\r\n",
					""
				],
				"execution_count": 174
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# if list_all_old_data is not None:\r\n",
					"#     for category, df_sensor_data in zip(category, list_all_old_data):\r\n",
					"#         df_sensor_data_pandas = df_sensor_data.toPandas()  # Convert Spark DataFrame to Pandas DataFrame\r\n",
					"#         df_sensor_data_pandas.to_csv(f\"{category}_sensors_reads.csv\")\r\n",
					"# else:\r\n",
					"#     print(\"list_all_old_data is None. Please initialize it before iterating.\")\r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### Check Statistics"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"\r\n",
					"if list_all_old_data is not None:\r\n",
					"    if all(isinstance(item, pd.DataFrame) for item in list_all_old_data):\r\n",
					"        # Assuming the first DataFrame in the list to inspect some properties\r\n",
					"        print(\"Rows in the first DataFrame:\", len(list_all_old_data[2]))\r\n",
					"        \r\n",
					"        # Assuming all DataFrames have the same index and can safely use the first one to demonstrate\r\n",
					"        print(\"From:\", list_all_old_data[2].index[0], \"To:\", list_all_old_data[2].index[-1])\r\n",
					"    else:\r\n",
					"        print(\"Not all items in list_all_old_data are DataFrames.\")\r\n",
					"else:\r\n",
					"    print(\"list_all_old_data is None. Please initialize it before iterating.\")\r\n",
					""
				],
				"execution_count": 181
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if list_all_old_data is not None:\r\n",
					"    print(\"Rows:\", len(list_all_old_data[0]))\r\n",
					"    #print(\"Total Sensors:\", sum([len(s.columns) for s in list_all_old_data]))\r\n",
					"    print(\"From:\", list_all_old_data[0].index[0]) \r\n",
					"    print(\"To:  \", list_all_old_data[0].index[-1])\r\n",
					"else:\r\n",
					"    print(\"list_all_old_data is None. Please initialize it before iterating.\")\r\n",
					""
				],
				"execution_count": 182
			}
		]
	}
}